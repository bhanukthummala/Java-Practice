Institute Name : IHUB TALENT MANAGEMENT 
Website        : www.ihubtalent.com 
Location       : Ameerpet , Hyderabad.
Trainer Name   : Niyaz Sir 
Experience     : 13+ years of experience in development and training
Course  Name   : Full Stack Java Development Course with AWS 
Batch No       : IH-JAVA-025
Duration       : 4 Months
Mode           : Online/Offline  

			
		Full Stack Java Development Course 		
			(Full stack Developer)
				|
	|--------------------------------------------|
FrontEnd technologies				BackEnd technologies 
(FrontEnd Developer)				(BackEnd Developer)		

> HTML5						> Core Java
> CSS3						> Advanced Java
> JavaScript						> JDBC
> Bootstrap						> Servlets
> React/ReactJS 					> JSP 
						> Oracle DB
							> SQL
							> PL/SQL 
						> Frameworks
							> Spring Boot	
							> Microservices	
				+
			    AWS Cloud 
				+
			Aptitute classes 
				+
			Softskills classes 
				+
			Free Recorded videos 

Programming language
=================
A language which is used to communicate between user and computer is called programming language.

Programming language acts like a mediator or interface between user and computer.

Diagram: introduction1.1


Java
======
Object oriented programming language
Platform independent programming language.
Case sensitive programming language
Strongly typed checking language.
High level programming language.
Open Source programming language.

1995 --> Sun Micro system --> Oracle Corporation 
Java software --> JDK software 

C
===
Procedure oriented programming language.
Platform dependent programming language.
Case sensitive programming language
Lossely typed checking language.
Middle level language (LOW + HIGH)


Interview Question
==============
Q)What is Java?

 Java is a object oriented , platform independent, case sensitive, 
 strongly typed checking, high level , open source programming language
 developed by James Gosling in the year of 1995.

Programming Language
=====================
A language which is used to communicate between user and computer is called programming language.

Programming language acts like a mediator or interface between user and computer.

Diagram: introduction2.1

Programming language is divided into two types.

1)Low Level Language 

2)High Level Language 

1)Low Level Language 
---------------------
A language which is understand by a computer easily is called low level language.

In general, a language which is computer dependent is called low level language.

ex:
	Machine Lanuage 
	Assembly Language
	

Machine Lanuage 
---------------
It is a fundamental language of a computer which is combination 
of 0's and 1's.

It is also known as binary language.

A computer may understands many languages but to understand machine language computer does not required any translator.

Advantages: 

> A program writtens in machine language consumes less memory.

> It does not required any translator.

> It is more efficient when compare to other languages.

Diadvantages:

> It is a burdun on a programmer to remember all dozen's of binary code.

> If anywhere error raised in our program then locating and handling that 
  error becomes difficult.

> Modifications can't be done easily.

Assembly Language
------------------
The second generation language came into an existence is called assembly language.

Assembly language is a replacement of symbols and letters for mathematical programming code i.e opcode values.

It is also known as symbolic language.

Assembly language can't understand by a computer directly. We need to use translator.

We have three translators.

i) Assembler 

ii) Compiler 

iii)Interpreter 

i) Assembler 
-----------
It is one of the translator which converts assemblic code to machine code.

Merits: 

> If anywhere error raised in our program then locating and handling that   error becomes easy.

> Modifications can be done easily.

Demerits:

> It is a mind trick to remember all symbolic code.

> It requires translator.

> It is less efficient when compare to machine language.


Q) What is Debugging?

Bug is also known as Error. 

The process of eliminating the bugs from the application is called debugging. 



2)High Level Language
----------------------
A language which is understand by a user easily is called high level language.

In general, a language which is user dependent is called high level language.

Ex:
	C++, C#, Java, .net ,Python and etc.

High level language can't understand by a computer directly.We need to take the support of translators.

compiler 
--------
	It is used to compile and execute our program at a time.

interpreter 
--------
	It will execute our program line by line procedure.

Advantages:

> It is easy to learn and easy to use because it is similar to english   language. 

> Debugging can be done easily.

> Modifications can be done easily.

Disadvantages:

> A program writtens in high level language consumes huge amount of memory.

> It requires translator.

> It is not efficient when compare to low level language.

Escape Characters or Escape Sequences
=====================================
Escape characters are used to design our output in neat and clean manner.

Every escape character or sequence starts with back slash(\) followed by a character.
ex:
	\n

Mostly escape characters are placed inside output statement in java.
ex:
	System.out.println("\n");

We have following list of escape characters or escape sequences in java.

1) \n (new line)

2) \t (horizontal tab)

3) \b (back space)

4) \r (carriage return)

5) \f (form feeding)

6) \\ (back slash)

7) \" (double quote)

8) \' (single quote)

and etc.


1) \n (new line)
----------------
class  Test
{
	public static void main(String[] args)
	{
		System.out.println("IHUB\nTALENT");
	}	
} 
o/p:
	IHUB
	TALENT

2) \t (horizontal tab)
------------------------
class Akhila
{
	public static void main(String[] args)
	{
		System.out.println("IHUB\tTALENT");
	}
}
o/p:
	IHUB	TALENT


3) \b (back space)
-------------------
class Vishnu
{
	public static void main(String[] args)
	{
		System.out.println("IHUBTAL\bENT");
	}	
}
o/p:
	IHUBTAENT

ex:
----
class Bharath
{
	public static void main(String[] args)
	{
		System.out.println("IHUB\b\b\bTALENT");
	}
}
o/p:
	ITALENT


4) \r (carriage return)
------------------------
class Lahari
{
	public static void main(String[] args)
	{
		System.out.println("IHUB\rTALENT");
	}
}
o/p:
	TALENT

ex:
----
class Anusha
{
	public static void main(String[] args)
	{	
		System.out.println("TALENT\rIHUB");
	}
}
o/p:
	IHUBNT 

6) \\ (back slash)
-------------------
class Vamshi
{
	public static void main(String[] args)
	{
		System.out.println("IHUB\\TALENT");
	}
}
o/p:
	IHUB\TALENT

7) \" (double quote)
--------------------
class Surya
{
	public static void main(String[] args)
	{
		System.out.println("IHUB\"TALENT");
	}
}
o/p:
	IHUB"TALENT

8)\' (single quote)
--------------------
class Razvi
{
	public static void main(String[] args)
	{
		System.out.println("IHUB'TALENT");
		System.out.println("IHUB\'TALENT");
	}
}
o/p:
	IHUB'TALENT
	IHUB'TALENT



C program
=========
Q)Write a c program to display %d ?

void main()
{
	clrscr();
		
	printf("%d"); //0 

	getch();
}

ex:
--
void main()
{
	clrscr();
		
	printf("%%d"); //%d

	getch();
}

Q)What is the difference between Python and Java?

Python					Java
------					------
It is developed by Guido Van Rossum.	It is developed by James Gosling.

It is a product of Microsoft.		It is a product of Oracle Corporation.

It is a scripting language.		It is a object oriented programming 
					language.

It is a interpreted language.		It is a compiled language.

It contains PVM.			It contains JVM.

It is a dynamically typed language.	It is a statically typed language.

Performance is low.			Perfomance is high.

Low security.				Highly secured.

It contains less code.			It contains more code.

Naming Conventions in java
===========================
In java, uppercase letters will treated as different and lowercase letters will treated as different that's why we consider java is a case sensitive programming language.

As java is a case sensitive we must and should follow naming conventions for following things.

ex:
	classes
	interfaces
	variables
	methods
	keywords
	packages & 
	constants 

classes
----------
In java, A class name must and should starts with uppercase letter and if it contains multiple words then each inner word must starts with initcap.
ex:
	Predefined classes		Userdefined classes
	------------------		-------------------
	System				Test
	FileWriter 			DemoApp
	BufferedReader 			QualityThought
	PrintWriter 			JavaDemo
	and etc.			and etc.
	

interfaces
-----------
In java, an interface name must and should starts with capital letter and if it contains multiple words then each inner word must starts with initcap.
ex:
	Predefined interfaces		Userdefined interfaces
	---------------------		-------------------
	Runnable 			ITest			
	Serializable 			IDemoApp
	Cloneable 			IQualityThought
	Statement 			and etc.
	ListIterator 
	and etc.

variables
-----------
In java, a variable name must and should starts with lowercase letter and if it contains multiple words then each inner word starts with initcap.
ex:
	predefined variables		userdefined variables
	--------------------		---------------------
	length				i	
	out				empId
	err				studName
	in 				deptNo
	and etc.			and etc.

methods
-------
In java, a method name must and should starts with lowercase letter and if it contains multiple words then each inner word starts with initcap.
ex:
	predefined methods		userdefined methods
	-------------------		------------------
	hashCode()			calculateBillAmt()
	toString()			getInfo()
	getMessage()			setDetails()
	setPriority()			and etc.
	and etc.


keywords
---------
In java, all keywords we need to write under lowercase letters only.

ex:
	predefined keywords
	------------------
	public , static , void  , class , if, else , do , for , while and etc.


packages
----------
In java, all packages we need to write under lowercase letters only.
ex:
	predefined packages		userdefined packages
	-------------------		---------------------
	java.lang			ihubtalent
	java.io				com.ihubtalent.www
	java.util			com.google.www 
	java.text			and etc.
	java.util.stream
	and etc.

constants
----------
In java, all constants we need to write under uppercase letters only.

ex:
	predefined constants		Userdefined constants
	-------------------		--------------------
	MAX_PRIORITY			LIMIT 
	NORM_PRIORITY			DEGREE
	MIN_PRIORITY			and etc.
	MAX_VALUE
	MIN_VALUE
	and etc.

Assignment
============
Class 		:	GopiNath 

Interface 	:	IGopiNath 

Variable	:	gopiNath

Method 		:	gopiNath()

Package 	:	com.gopinath.www

Constant	:	GOPINATH/GOPI_NATH


Interview Questions
=====================

Q) What is Java?

Java is a object oriented, platform independent, case sensitive, strongly typed checking, high level , opensource programming language developed by James Gosling in the year of 1995.


Q)What are the features of Java?

We have following important features in java.

1)Simple 
2)Object oriented 
3)Platform independent 
4)Highly secured 
5)Architecture Neutral 
6)Robust  
7)Multithreaded 
8)Dynamic 
9)Distributed 
and etc.


Q)Who is the responsible to destroy the objects in java?

	Garbage Collector 

Q) Who is the responsible to execute the java program?

	JVM (Java Virtual Machine)

Q) Where our java program will execute?

	JRE (Java Runtime Environment)


Q)In how many ways we can call garbage collector? 

There are two ways to call garbage collector in java.

1)System.gc()

2)Runtime.getRuntime().gc()


History of Java
===============
In 1990, Sun Micro System took one project to develop a software called consumer electronic device which can be control by a remote like setup box.
That time project was called Stealth project and later it was renamed to Green project.

James gosling, Mike Sheradin and Patrick Naughton were there to develop the project and they have met in a place called Aspan/Colarado to start with work with Graphic System. James Gosling decided to use C and C++ languages to develop the project.But the problem what they have faced is , C and C++ languages are system dependent. Then James Gosling decided why don't we create our own programming language which is system independent.

In 1991, They have developed one programming language called an OAK. OAK means strength, itself is a coffee seed name and it is a national tree for many 
countries like Germany, France, USA and etc.

Later in 1995, They have renamed OAK to Java. Java is island of an Indonasia
where first coffee of seed was produced and during the development of project they were consuming lot of coffee's.Hence symbol of java is a cup of coffee with saucer.


Identifiers
============
A name in java is called identifier.

It can be variable, method name, class name or label name.

ex:
	class  Test
	{
		public static void main(String[] args)
		{
			int  i = 10;

			System.out.println(i);
		}
	}

	Here Test, main , args and i are identifiers.

Rules to declare an identifiers
--------------------------------
Rule1:
------
	Identifier will accept following characters.
	ex:
		A-Z
		a-z
		0-9
		_
		$
Rule2:
-----
	If we take other characters then we will get compile time error.
	ex:
		int  empId; //valid 
		int  emp_id; //valid
		int  emp$sal; //valid
		int  dept#No; //invalid  

Rule3:
----
	Every identifier must and should starts with alphabet, underscore or 
	dollar symbol but not with digits.
	ex:
		int  a1234; //valid 
		int  _abcd; //valid 
		int  $=20;  //valid  
		int  1abcd; //invalid 
Rule4:
------
	Every identifier is a case sensitive.
	ex:
		int number;
		int NUMBER;
		int NumBer;

Rule5:
------
	We can't take reserved words as an identifier.	
	ex:
		int  if; //invalid 
		int  for; //invalid
		int public; //invalid 

Rule6:
------
	There is no length limit for an identifier but it is not recommanded
	to take more then 15 characters.

Rule7:
-----
	Identifier can be alpha numeric character also.
	ex:
		int  emp_Id1;

Reserved Words
=============
There are some identifiers which are reserved to associate some functionality or meaning such type of identifiers are called reserved words.

Java supports 53 reserved words.

All reserved words we need to declare under lowercase letters only.

In java reserved words are divided into two types.

Diagram: java5.1		

Used keywords with respect to class
-----------------------------
package
import
enum
class
interface
extends
implements 

Used keywords with respect to object
------------------------
new 
instanceof
this
super

Used keywords with respect to datatypes
------------------------------------
byte
short
int
long
float
double
boolean
char 

Used keywords with respect to modifiers
-----------------------------
default
public 
private 
protected
final
abstract
static
strictfp
synchronized
native
transient 
volatile 

Used keywords with respect to return type
-----------------------
void 

Used keywords with respect to flow control
----------------------------------
if
else
switch
case 
break
continue
do
while
for 

Used kewords with respect to exception handling
----------------------
try
catch
finally
throw
throws
assert 

Interview questions
====================

Diagram : java5.2


Java
=======
JDK		:	1.8v 

Version		:	Java 8 

Creator		:	James Gosling 

Vendor		:	Oracle Corporation

Open source	:	Open source 

website		:	www.oracle.com/in/java

Download link   : 

https://drive.google.com/file/d/16fr2McV_Bex0NYlOdcVfC4k2gwUUNqzq/view?usp=drive_link


Steps to setup Java Environmental variables
===========================================
step1:
-----
	Make sure JDK 1.8 version installed successfully.

step2:
------
	Copy "lib" directory from java_home folder.
	ex:
		C:\Program Files\Java\jdk1.8.0_181\lib

step3:
------
	Paste "lib" directory in environmental variables.
	ex:
		Right click to My PC/Mycomputer --> properties -->
		Advanced system settings --> environrmental variables -->
		
		User variables --> click to new button --> 
		variable Name :  CLASSPATH
		variable value : C:\Program Files\Java\jdk1.8.0_181\lib;
		---> ok. 

		System variables  --> click to new button -->
		variable Name :  path 
		variable value : C:\Program Files\Java\jdk1.8.0_181\bin;
		---> ok ---> ok ---> ok.

step4:
-----
	Check the environmental setup done perfectly or not.
	ex:
		cmd> javap 
		cmd> java -version 


Steps to develop first application in java
============================================
step1:
------
	Make sure JDK 1.8 version installed successfully.

step2:
------
	Make sure environmental setup done perfectly.

step3:
------
	Create a "javaprog" folder inside 'E' drive.

step4:
------
	Open the notepad and develop simple Hello World.
	ex:
	class  Test
	{
		public static void main(String[] args)
		{
			System.out.println("Hello World");
		}	
	}	

step5:
----
	Save java program with same name as class name inside javaprog folder.

step6:
------
	Open the command prompt from javaprog folder.

step7:
------
	compile the java program by using below command.
	ex:
		javac   Test.java 
			  |
			file name 

step8:
-----
	Run the java program by using below command.
	ex:
		java    Test
			|
			classname 

Internal Architecture of JVM
=============================
Diagram: java6.1

Java  application contains java code instructions.Once if we compile , java code instructions converts to byte code instructions in .class file.

JVM will invoke one module called classloader or sub system to load all the byte code instructions from .class file. The work of classloader is to check these byte code instructions are proper or not.If they are not proper , it will refuse the execution.If they are proper , it will allocate the memory.

We have five types of memories in java.

1)Method Area 
------------- 
Method are contains code of a class, code of a method and code of a variable.

2)Heap area 
------------
Our object creations will store in heap area.

Note:
------
Whenever JVM loads byte code instructions from .class file , it will create method area and heap area automatically.

3)Java Stack 
------------
Java methods will execute in method area but to execute those methods we required some memory , that memory will be allocated in java stack.

4)PC Register 
-----------
It is a program counter register which is used to track the address of an instructions.

5)Native Method Stack
--------------------
Java methods will execute in method area.
Similarly native methods will execute in native method stack.
Native methods we can't execute directly.we required a program called Native method interface.

Execution engine
----------------
Execution engine contains interpreter and JIT compiler.

Whenever JVM loads byte code instructions from .class file , it will use interpreter and jit compiler simultenously.

Interpreter is used to execute our program line by line procedure.

JIT compiler is used to increase the execution speed of our program.


Interview Questions
====================
Q)How many memories are there in java?

We have five memories in java.

1)Method Area 
2)Heap 
3)Java Stack 
4)PC Register 
5)Native Method Stack

Q)What is Native method in java?

A method which is developed by using some other language is called native method.


Q)What is JIT compiler?

It is a part of a JVM which is used to increase the execution speed of our program. 


Q)How many classloaders are there in java?

We have three predefined classloaders in java.

1)Bootstrap classloader (It loads rt.jar file)

2)Extension classloader (It loads all the jar files from ext folder)

4)Application/System classloader (It loads the .class file from CLASSPATH)

Q)What is package?

A package is a collection of classes and interfaces.


Q)What is Literal ?

A value which is assign to a variable is called literal.

A value which is not change during the program execution is called literal.

ex:
	int  i = 10;
	 |   |	 |___value of a variable | Literal 
	 |   |_______variable name | identifier 		
	 |___________datatype | keyword 



Datatypes
=========
Datatype describes what type of value we want to store inside a variable.

Datatype also tells how much memory has to be created for a variable.

In java, we have two types of datatypes.

Diagram: java7.1

byte
------
It is smallest datatype in java.

Size:  1 byte (8 bits)

Range: -128 to 127 (-2^7 to 2^7-1)

ex:
	1) byte b=10;
	   System.out.println(b); // 10

	2) byte b=130;
	   System.out.println(b); // C.T.E 

	3) byte b=10.5;
	   System.out.println(b); // C.T.E 
	


short
-------
It is a rarely used datatype in java.

Size: 2 bytes (16 bits)

Range: -32768 to 32767 (-2^15 to 2^15-1)

ex:
	1) byte b=20;
	   short s=b;
	   System.out.println(s); // 20 

	2) short s="hi";
           System.out.println(s); // C.T.E 

	3) short s=true;
   	   System.out.println(s); // C.T.E 


int
-----
It is mostly used datatype in java.

Size: 4 bytes (32 bits)

Range: -2147483648 to 2147483647 (-2^31 to 2^31-1)

ex:
	1) int i="false";
           System.out.println(i); // C.T.E 

	2) int i=10.5;
           System.out.println(i); // C.T.E 

	3) int i=true;
	   System.out.println(i); // C.T.E 

	4) int i='a';
	   System.out.println(i); // 97

Note:
-----
In java , for every character we have Universal Unicode value.
ex:
	a ---  97  
	A ---  65 

long
-----
If int datatype is not enough to hold large value then we need to use long datatype.

Size: 8 bytes (64 bits)

Range : (-2^63 to 2^63-1)

ex:
	1) long l="A";
	   System.out.println(l); // C.T.E 	

	2) long l='A';
           System.out.println(l); // 65 

	3) long l=10.5;
	   System.out.println(l); // C.T.E 

	4) long l=true;
           System.out.println(l); // C.T.E 

Q)Difference between float and double?

float					double
----------				---------
If we want 4 to 6 decimal point of 	If we want 14 to 16 decimal point of 
accuracy then we need to use float.	accuracy then we need to use double.

Size : 4 bytes (32 bits)		Size : 8 bytes (64 bits)

Range: -3.4e38 to 3.4e38 		Range: -1.7e308 to 1.7e308

To declare a float value we need to 	To declare a double value we need to 
suffix with 'f'.			suffix with 'd'.
ex:					ex:
	10.5f					10.5d

ex:
----
	1) float f=10.5f;
	   System.out.println(f); // 10.5

	2) float f=10;
	   System.out.println(f); // 10.0

	3) float f='a';
           System.out.println(f); // 97.0 

	4) float f="hi";
	   System.out.println(f); // C.T.E 

	5) float f=true;
           System.out.println(f); // C.T.E 

boolean
-------
A boolean datatype is used to represent boolean values either true or false.

Size : (Not Applicable)

Range : (Not Applicable)

ex:
	1) boolean b=TRUE;
	   System.out.println(b); // C.T.E 

	2) boolean b="false";
	   System.out.println(b); // C.T.E 

	3) boolean b=true;
	   System.out.println(b); //true 

char
------
It is a single character which is enclosed in a single quotation.

Size : 2 bytes (16 bits)

Range : 0 to 65535 

ex:
	1) char ch='a';
           System.out.println(ch); //a 

	2) char ch='ab';
           System.out.println(ch); //C.T.E

	3) char ch="a";
           System.out.println(ch); // C.T.E  

Diagram: java7.2


Interview Questions
==================
Q) Is java purely object oriented or not?

No, Java will not consider as purely object oriented programming language because java does not support many OOPS concepts like multiple inheritance, operator overloading and more ever we depends upon primitive datatypes which are non-objects.


Types of variables
===================
A name which is given to a memory location is called variable.

Purpose of variable is used to store the data.

In java variables are divided into two types.

1)Primitive variables
--------------------
	It is used to represent primitive values.

2)Reference variables 
-----------------
	It is used to represent object reference.
	ex:
		Employee e=new Employee();
			 |
			reference variable 

Based on the position and execution these variables are divided into three types.

1)Instance variables  / Non-static variables 

2)Static variables  / Global variables 

3)Local variables / Temperory variables / Automatic variables 


1)Instance variables 
-----------------------
A value of a variable which is varied from object to object is called instance variable.

Instance variable will be created at the time of object creation and it will destroy at the time of object desctructions.Hence scope of instance variable is same as scope of an object.

Instance variable will store in heap area as a part of an object.

Instance variable must and should declare immediately after the class but not inside methods ,blocks and constructors.

Instance variable can access directly from instance area but we can't access directly from static area.

To access instance variable from static area we need to create object reference.

ex:1
----
class Test
{
	//instance variable
	int i=10;

	public static void main(String[] args)
	{
		System.out.println(i);//C.T.E  
	}
}

ex:2
-----
class Test
{
	//instance variable
	int i=10;

	public static void main(String[] args)
	{
		Test t=new Test();
		System.out.println(t.i);//10
	}
}

Note:
-----
If we won't initialize any value to instance variable then JVM will initialized default value.

ex:3
-----
class Test
{
	//instance variable
	boolean b;

	public static void main(String[] args)
	{
		Test t=new Test();
		System.out.println(t.b);//false 
	}
}

ex:4
----
class Test
{
	public static void main(String[] args)
	{
		//calling
		Test t=new Test();
		t.m1();
	}
	//non-static method 
	public void m1()
	{
		System.out.println("instance-method");
	}
}


2)static variable
==================
A value of a variable which is not varied from object to object is called static variable.

Static variable will be created at the time of classloading and it will destroy at the time of class unloading .Hence scope of static variable is same as scope of .class file.

Static variable will store in method area.

Static variable must and should declare immediately after the class using static keyword but not inside methods,blocks and constructors.

Static variable can access directly from instance area and static area.

Static variable can access by using object reference and classname.

ex:
-----
class Test
{
	//static variable 
	static int i=10;

	public static void main(String[] args)
	{
		System.out.println(i);//10	

		Test t=new Test();
		System.out.println(t.i);//10

		System.out.println(Test.i);//10
	}
}

if we won't initialize any value to static variable then JVM will intialized default values.

ex:
----
class Test
{
	//static variable 
	static String s;

	public static void main(String[] args)
	{
		System.out.println(s);//null
	}
}

ex:
----
class Test
{
	public static void main(String[] args)
	{
		m1();

		Test t=new Test();
		t.m1();

		Test.m1();
	}
	public static void m1()
	{
		System.out.println("static-method");
	}
}

3)Local variables
=================
To meet temperory requirements a programmer will declare some variables inside methods, blocks and constructors such type of variables are called local variables.

Local variable will be created at the time of execution blocks and it will destroy when execution block is executed.Hence scope of local variable is same as execution block where it is declared.

Local variables will store in Java stack memory.

ex:
----
class Test
{
	public static void main(String[] args)
	{
		//local variable 
		int i=10;
		System.out.println(i);
	}
	
}

Note:
-----
If we won't initialize any value local variable then JVM will not initialized any default value.
ex:

class Test
{
	public static void main(String[] args)
	{
		//local variable 
		int i;
		System.out.println(i);
	}
	
}
o/p:
	C.T.E variable i might not have been initialized

A local variable will accept only final modifier.

ex:
class Test
{
	public static void main(String[] args)
	{
		//local variable 
		final int i=10;
		System.out.println(i);//10
	}
	
}

ex:
----
class Test
{
	public static void main(String[] args)
	{
		//local variable 
		final int i=10;
		i=20;
		i=30;
		System.out.println(i);//C.T.E 
	}
	
}
Note:
	We can't assign any value to final variable.

Main method
===========
Our program contains main method or not.Either it is properly declare or not. It is not a responsibility of a compiler to check. It is a liability of a JVM to look for main method always at runtime.If JVM won't find main method then it will throw one runtime error called main method not found.

JVM always look for main method with following signature.

ex:
	public  static  void  main(String[] args) 

If we perform any changes in above signature then we will get runtime error called main method not found.

public
-------
JVM wants to call this method from anywhere.

static
------
JVM wants to call this method without using object reference.

void
-----
Main method does not return any value to JVM.

main
----
It is an identifier given to main method.

String[] args
------------
It is known as command line arguments.

We can perform following changes in main method.

1)Order of modifier is not important , incase of public static we can declare static public also.
	ex
		static public void main(String[] args)

2)We can change String[] in following acceptable formats.
	ex:
		public static void main(String[] args)
		public static void main(String   []args)
		public static void main(String args[])

3)We can replace String[] with var-arg parameter.
 	ex:
		public static void main(String... args)

4)We can change args with any java valid identifier.
	ex:
		public static void main(String[] ihub)

5)Main method will accept following modifiers.
  ex:
		synchronized 
		strictfp
		final 


Command line arguments
========================
Arguments which are passing through command prompt such type of arguments are called command line arguments.

In command line argument we need to pass our input values at runtime command.

ex:
	javac   Test.java 
		
	java    Test  101  raja  M  1000.0
			|   |	 |   |_____args[3]
			|   |	 |_________args[2]
			|   |______________args[1]
			|__________________args[0]

ex:
class Test
{
	public static void main(String[] args)
	{
		System.out.println(args[0]);
		System.out.println(args[1]);
		System.out.println(args[2]);
		System.out.println(args[3]);		
	}
}

Q)Write a java program to accept one input and display it ?

class Test
{
	public static void main(String[] args)
	{
		String name=args[0];
		System.out.println("Welcome :"+name);	
	}
}
javac  Test.java

java  Test  ElonMusk 


System.out.println()
=======================
It is a output statement in java.

Whenever we want to display any data or userdefined statements then we need to use System.out.println().

syntax:
		static variable 
		|
	System.out.println() 
	|		|
	predefined	predefined method.
	final 
	class 


ex:
----
class Test
{
	public static void main(String[] args)
	{
		System.out.print("stmt1");
		
		System.out.printf("stmt2");

		System.out.println("stmt3");
	}
}

Various ways to display the data
=================================
1)
	System.out.println("Hello World");

2)
	int i=10;
	System.out.println(i);
	System.out.println("The value is ="+i);

3)
	int i=10,j=20;
	System.out.println(i+"   "+j);
	System.out.println(i+" and "+j);

4)
	int i=1,j=2,k=3;
	System.out.println(i+" "+j+" "+k);

Fully Qualified Name
====================
Fully qualified name means we will declare a class or interface along with package name.

It improves readability of our code.

ex:
	java.text.SimpleDateFormat(C)
	java.util.Iterator(I)

ex:
---
class Test
{
	public static void main(String[] args)
	{
		java.util.Date d=new java.util.Date();
		System.out.println(d);
	}
}

import statements
==================
Whenever we use import statement we should not use fully qualified name.

Using short name also we can achieve.

We have three types of import statements in java.

1)Explicit class import 

2)Implicit class import 

3)Static import 

1)Explicit class import 
------------------------
This type of import statement is highly recommanded to use because it will improve readability of our code.

ex:

import java.time.LocalDate;
import java.time.LocalTime;
class Test
{
	public static void main(String[] args)
	{
		LocalDate d=LocalDate.now();
		System.out.println(d);

		LocalTime t=LocalTime.now();
		System.out.println(t);
	}
}


2)Implicit class import
---------------------
This type of import statement is it not recommanded to use because it will reduce readability of our code.

ex:
import java.time.*;
class Test
{
	public static void main(String[] args)
	{
		LocalDate d=LocalDate.now();
		System.out.println(d);

		LocalTime t=LocalTime.now();
		System.out.println(t);
	}
}

3)static import
----------------
Using static import we can call static members directly.

Often use of static import makes our program less redable and complex.

ex:

import static java.lang.System.*;
class Test
{
	public static void main(String[] args)
	{
		out.println("stmt1");
		out.println("stmt2");
		out.println("stmt3");
	}
}

ex:
---
import static java.lang.System.*;
class Test
{
	public static void main(String[] args)
	{
		out.println("stmt1");
		exit(0);
		out.println("stmt3");
	}
}



Editplus Editor
===============
Download link : https://www.editplus.com/download.html


Basic Java Programs
====================

Q)Write a java program to perform sum of two numbers ? 

import  java.util.Scanner;
class  Example1
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first number :");
		int a=sc.nextInt();

		System.out.println("Enter the second number :");
		int b=sc.nextInt();

		int c=a+b;

		System.out.println("sum of two numbers is ="+c);
	}
}

Q)Write a java program to perform sum of two numbers without using third variable?

import  java.util.Scanner;
class  Example2
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first number :");
		int a=sc.nextInt();

		System.out.println("Enter the second number :");
		int b=sc.nextInt();


		System.out.println("sum of two numbers is ="+(a+b));
	}
}

Q)Write a java program to find out square of a given number?

import  java.util.Scanner;
class  Example3
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the number :");
		int n=sc.nextInt();

		//logic
		int square=n*n;
		
		System.out.println("square of a given number is ="+square);
	}
}

Q)Write a java program to find out cube of a given number?

import  java.util.Scanner;
class  Example4
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the number :");
		int n=sc.nextInt();

		//logic
		int cube=n*n*n;
		
		System.out.println("cube of a given number is ="+cube);
	}
}


Q)Write a java program to find out area of a circle ?

import  java.util.Scanner;
class  Example5
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the Radius  :");
		int r=sc.nextInt();

		//logic
		float area=3.14f*r*r;

		System.out.println("Area of a circle is ="+area);
	}
}


Q)Write a java program to find out perimeter of a circle?

import  java.util.Scanner;
class  Example6
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the Radius  :");
		int r=sc.nextInt();

		//logic
		float perimeter=2*3.14f*r;

		System.out.println("Perimeter of a circle is ="+perimeter);
	}
}

Q)Write a java program to accept one salary then find out 10% of TDS?


import  java.util.Scanner;
class  Example7
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the Salary  :");
		int salary=sc.nextInt();

		//logic
		float tds=(float)salary*10/100;

		System.out.println("10 percent of TDS is  ="+tds);
	}
}


Q)Write a java program to convert CGPA to Percentage? 

import java.util.Scanner;
class Example8
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the CGPA :");
		float cgpa=sc.nextFloat();

		float percentage=cgpa*9.5f;

		System.out.println("CGPA to percentage is ="+percentage);
	}
}

Q)Write a java program to perform swapping of two numbers?

import java.util.Scanner;
class Example9
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first number :");
		int a=sc.nextInt();//10

		System.out.println("Enter the second number :");
		int b=sc.nextInt();//20 

		System.out.println("Before swapping a ="+a+" and b="+b);
		
		//swapping 
		int temp=a;
		a=b;
		b=temp;

		System.out.println("After swapping a="+a+" and b="+b);

	}
}

Q)Write a java program to perform swapping of two numbers without using third variable ?


import java.util.Scanner;
class Example10
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first number :");
		int a=sc.nextInt();//10

		System.out.println("Enter the second number :");
		int b=sc.nextInt();//20 

		System.out.println("Before swapping a ="+a+" and b="+b);
		
		//swapping logic
		a=a+b;
		b=a-b;
		a=a-b;
		

		System.out.println("After swapping a="+a+" and b="+b);

	}
}

Typecasting
==============
The process of converting from one datatype to another datatype is called typecasting.

In java , typecasting can be performed in two ways.

1)Implicit typecasting 

2)Explicit typecasting 

1)Implicit typecasting 
---------------------
If we want to store small value into a bigger variable then we need to use implicit typecasting.

A compiler is responsible to perform implicit typecasting.

There is no possibility to loss the information.

It is also known as Widening or Upcasting.

We can perform implicit typecasting as follow.

ex:

	byte --->short
			---->
				int  --> long ---> float ---> double
			---->
		char 


ex:
----
class Test 
{
	public static void main(String[] args) 
	{		
		byte b=10;
		int i=b;
		System.out.println(i); //10
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{		
		char ch='a';

		float f=ch;

		System.out.println(f); // 97.0
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{		
		int i=10;

		double d=i;

		System.out.println(d); // 10.0
	}
}

2)Explicit typecasting 
---------------------
If we want to store bigger value into a smaller variable then we need to use explicit typecasting.

A programmer is responsible to perform explicit typecasting.

There is a possibility to loss the information.

It is also know as Narrowing or Downcasting.

We can perform explicit typcasting as follow.
ex:

	byte <---short
			<----
				int  <-- long <--- float <--- double
			<----
		char 

ex:


class Test 
{
	public static void main(String[] args) 
	{	
		float f=10.56f;

		int i=(int)f;

		System.out.println(i);//10

	}
}

ex:
----
class Test 
{
	public static void main(String[] args) 
	{	
		int i=65;

		char ch=(char)i;

		System.out.println(ch); //A 
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{	
		int i=130;

		byte b=(byte)i;

		System.out.println(b);//-126
	}
}

Types of blocks in java
========================
A block is a set of statement which is enclosed in a curly braces i.e {}.

In Java , We have three types of blocks.

1)Instance block 

2)Static block 

3)Local block 

1)Instance block 
------------------
Instance block is used to initialize the values to instance variables.

Instance block will execute when we create an object.

We can declare instance block as follow.

syntax:
	//instance block
	{
		-
		- // set of statements 
		-
	}

ex:
----
class Test 
{
	//instance block
	{
		System.out.println("instance-block");
	}
	public static void main(String[] args) 
	{	
		System.out.println("main-method");
	}
}

ex:
---
class Test 
{
	//instance block
	{
		System.out.println("instance-block");
	}
	public static void main(String[] args) 
	{	
		System.out.println("main-method");
		Test t=new Test();
	}
}
o/p:
	main-method 
	instance-block


ex:
------
class Test 
{
	//instance block
	{
		System.out.println("instance-block");
	}
	public static void main(String[] args) 
	{	
		Test t1=new Test();
		System.out.println("main-method");
		Test t2=new Test();
	}
}

o/p:
	instance-block
	main-method 
	instance-block

ex:
---
class Test 
{
	//instance variable
	int i;

	//instance block
	{
		i=100;
	}
	public static void main(String[] args) 
	{	
		Test t=new Test();
		
		System.out.println(t.i);
	}
}

2)Static block 
----------------
A static block is used to initialize the value to static variable.

A static block will execute at the time of classloading.

We can declare static block as follow.

syntax:
	//static block
	static
	{
		-
		- //set of statements 
		-
	}


ex:
----
class Test 
{
	//static block
	static
	{
		System.out.println("static-block");
	}

	public static void main(String[] args) 
	{	
		System.out.println("main-method");
	}
}

o/p:
	static-block
	main-method

ex:
-----
class Test 
{
	//instance block
	{
		System.out.println("instance-block");
	}
	//static block
	static
	{
		System.out.println("static-block");
	}

	public static void main(String[] args) 
	{	
		Test t=new Test();
		System.out.println("main-method");
	}
}
o/p:
	static-block
	instance-block
	main-method

ex:
----
class Test 
{
	//static variable
	static int i;

	//static block
	static
	{
		i=200;
	}

	public static void main(String[] args) 
	{	
		System.out.println(i);//200
	}
}


3)Local block
--------------
A local block is used to initialize the local variables.

A local block will execute just like normal statement.

We can declare local block as follow.

syntax:
	//local block 
	{
		-
		- //set of stmt 
		-	
	}

ex:
----
public class Test 
{
	public static void main(String[] args) 
	{	
		System.out.println("stmt1");
		//local block
		{
			System.out.println("stmt2");
		}
		System.out.println("stmt3");
	}
}
o/p:
stmt1
stmt2
stmt3

ex:
-----
class Test 
{
	public static void main(String[] args) 
	{	
		//local variable
		int i;

		//local block
		{
			i=300;
		}

		System.out.println(i);
	}
}


Java Source File structure
==========================
case1:
------
	A java program can have multiple classes.

case2:
------
	If a java program contains multiple classes then we need to 
	check which class contains main method and that class will consider
	as main class.
	ex:
		A.java
		----------
		class A 
		{
			public static void main(String[] args)
			{
				-	
			}
		}
		class B 
		{
			-	
		}

case3:
------
	If a java program contains multiple classes with main method 
	then we need to declare atleast one class as public and that
	class will treated as main class.

A.java
-------
public class A 
{
	public static void main(String[] args) 
	{	
		System.out.println("A-class");
	}
}
class B 
{
	public static void main(String[] args) 
	{	
		System.out.println("B-class");
	}
}
class C 
{
	public static void main(String[] args) 
	{	
		System.out.println("C-class");
	}
}

o/p:
	javac  A.java (Here three .class files will be created)

	java  A 
	java  B
 	java  C  

Assignments
===========
Q)Write a java program to area of a triangle?

Q)Write a java program to accept six marks of a student then find out 
  total and  average?

Q)Write a java program to find out area of a rectangle?


Operators
==========
Operator is a symbol which is used to perform some operations on operands.
ex:
	a + b 

	Here + is a operator 
	Here a and b are operands.

It can be arithmetic operation, logical operation, bitwise operation and etc.

We have following list of operators in java.

1) Assignment Operators 

2) Conditional/ Ternary Operators

3) Logical Operators 

4) Bitwise Operators  

5) Relational operators 

6) Arithmetic operators 

7) Unary operators 

1) Assignment Operators 
------------------------

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		int i=10;
		i=20;
		i=30;
		System.out.println(i); //30
	}
}
Note:	Reinitialization of a variable is possible 
ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		final int i=10;
		i=20;
		i=30;
		System.out.println(i); //C.T.E 
	}
}
Note: cannot assign a value to final variable
	
ex:
----
class  Test 
{
	public static void main(String[] args) 
	{
		int i=1,2,3,4,5;

		System.out.println(i);
	}
}
Note : C.T.E Illegal start of expression

ex:
----
class  Test 
{
	//global variable 
	static int i=100;

	public static void main(String[] args) 
	{
		//local variable 	
		int i=200;

		System.out.println(i);
	}
}
Note:	Here priority goes to local variable 

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		 boolean b = 5 > 2;

		 System.out.println(b); //true 
	}
}

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		int i= 10 % 2;
		System.out.println(i);  //0 
		
		int j= 10 % 20;
		System.out.println(j); //10
			
	}
}

ex:
----
class  Test 
{
	public static void main(String[] args) 
	{
		int i= 10 / 2;
		System.out.println(i);  //5 
		
		int j= 10 / 20;
		System.out.println(j); //0
			
	}
}

ex:
----
class  Test 
{
	public static void main(String[] args) 
	{
		int i=10;

		i+=2; // i = i + 2 ; 

		System.out.println(i); //12
			
	}
}

ex:
----
class  Test 
{
	public static void main(String[] args) 
	{
		int i=10;

		i*=3; // i = i * 3

		System.out.println(i); //30
			
	}
}

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		int i=10;

		i%=3; // 

		System.out.println(i); //1
			
	}
}

ex:
-----
class  Test 
{
	public static void main(String[] args) 
	{
		int i=10;

		i/=3; // 

		System.out.println(i); //3
			
	}
}



2) Conditional/ Ternary Operators
--------------------------------
syntax:
	(condition)?value1:value2;

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		boolean b=(5>2)?true:false;
		System.out.println(b);//true 
	}
}

ex:
----
class  Test 
{
	public static void main(String[] args) 
	{
		int i=(5>20)?1:0;
		System.out.println(i);//0
	}
}

Q)Write a java program to find out greatest of two numbers?

import java.util.Scanner;
class  Test 
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first number :");
		int a=sc.nextInt();

		System.out.println("Enter the second number :");
		int b=sc.nextInt();

		//logic
		int max=(a>b)?a:b;
		System.out.println(max+" is greatest");
	}
}


Q)Write a java program to find out greatest of three numbers?

import java.util.Scanner;
class  Test 
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first number :");
		int a=sc.nextInt();

		System.out.println("Enter the second number :");
		int b=sc.nextInt();

		System.out.println("Enter the third number :");
		int c=sc.nextInt();

		//logic
		
		int max=(a>b)?((a>c)?a:c):((b>c)?b:c);
		

		System.out.println(max+" is greatest");
	}
}


3)Logical operators
--------------------


Logical AND operator (&&) 
---------------------------
Truth table 
----------
T	T	= T
T	F	= F 
F	T	= F 
F	F	= F 

ex:
----
class  Test 
{
	public static void main(String[] args) 
	{
		boolean b= (5>2) && (6<10);

		System.out.println(b);//true 
	}
}

ex:
----
class  Test 
{
	public static void main(String[] args) 
	{
		boolean b= (5>20) && (6<10);

		System.out.println(b);//false 
	}
}

ex:
----
class  Test 
{
	public static void main(String[] args) 
	{
		boolean b= true && false;

		System.out.println(b);//false 
	}
}


Logical OR operator (||) 
---------------------------
Truth table 
----------
T	T	= T
T	F	= T 
F	T	= T
F	F	= F 

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		boolean b= (5>20) || (6<3);

		System.out.println(b);//false 
	}
}

ex:
----
class  Test 
{
	public static void main(String[] args) 
	{
		boolean b= (5>2) || (6<30);

		System.out.println(b);//true 
	}
}

ex:
----
class  Test 
{
	public static void main(String[] args) 
	{
		boolean b= (5>2) || (6<3);

		System.out.println(b);//true 
	}
}

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		boolean b= (5>20) && (6<2) || true;

		System.out.println(b);//true 
	}
}

Logical NOT operator (!)
--------------------------

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		boolean b=!(5>2);
		System.out.println(b);//false 
	}
}


ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		boolean b=!(5>20);
		System.out.println(b);//true 
	}
}

Assignment
==========
Q)Write a java program to accept one employee salary then display 
Basic salary ,  10% of tax deduction  and Actual salary ?

inputs:
		100000

outputs:

	Basic Salary : 100000
	Tax Deduction: 10000
	Actual Salary: 900000


ex:
import java.util.Scanner;
class FindEmpInfo
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the salary :");
		int salary=sc.nextInt();
		System.out.println("Basic Salary :"+salary);

		float tax=(float)salary*10/100;
		System.out.println("Tax Deduction:"+tax);

		float actualSal = salary - tax;
		System.out.println("Actual Salary :"+actualSal);
	}	
}


Converting decimal to binary number
===================================

Decimal number : 10

Binary number  : 1010

	2|10
	 ---- 0
	2|5
	 ---- 1
	2|2		^
	 ---- 0 	|
	  1		|
	-----------------
	1010


Converting binary to decimal number
==================================
Binary number : 0101

Decimal number : 5 

	0101
	    <----
	1*1 + 0*2 + 1*4 + 0*8 

	1 + 0 + 4 + 0 = 5	
		

4)Bitwise Operators
====================

Bitwise AND operator (&)
------------------------
Bitwise AND operator deals with binary numbers.

Truth table
------------
T	T	= T
T	F	= F 
F	T	= F 
F	F	= F 

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int a=10,b=15;
		int c= a & b;
		System.out.println(c);//10
	}
}
/*
		10 - 1010
		11 - 1111
		----------
		&  - 1010
				  <----
		0*1 + 1*2 + 0*4 + 1*8
		
		0 + 2 + 0 + 8 =10	

*/

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int a=2,b=3;
		int c= a & b;
		System.out.println(c);//2
	}
}
/*
		2 - 0010 
		3 - 0011
		--------
        & - 0010 
				 <----
		0*1 +  1*2 + 0*4  + 0*8
		
		0 + 2 + 0 + 0 = 2
*/

Bitwise OR operator(|)
------------------------
Bitwise OR operator deals with binary numbers.

Truth table
-----------
T	T	= T
T	F	= T
F	T	= T 
F	F	= F 

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int a=10,b=15;
		int c= a | b;
		System.out.println(c);// 15
	}
}
/*
		10 - 1010
		15 - 1111
		-----------
		|  - 1111
				  <---
		1*1 + 1*2 + 1*4 + 1*8

		1 + 2 + 4 + 8 = 15
*/



Bitwise XOR operator (^)
--------------------------
Bitwise XOR operator deals with binary numbers.

Truth table
----------
T	T	= F
T	F	= T
F	T	= T
F	F	= F  

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int a=10,b=15;
		int c= a ^ b;
		System.out.println(c);// 5
	}
}
/*
		10 - 1010
		15 - 1111
		-----------
		^  - 0101
				  <----
		1*1 + 0*2 + 1*4 + 0*8

		1 + 0 + 4 + 0  = 5


*/

Bitwise NOT operator (~)
--------------------------
class  Test
{
	public static void main(String[] args) 
	{
		int i=~10;

		System.out.println(i); // -11 
	}
}

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int i=~23;

		System.out.println(i); // -24
	}
}


ex:
-----
class  Test
{
	public static void main(String[] args) 
	{
		int i=~(-9);

		System.out.println(i); // 8
	}
}

5)Relational operators 
----------------------
class  Test
{
	public static void main(String[] args) 
	{
		System.out.println(10 > 20); //false 

		System.out.println(10 < 20); //true 

		System.out.println(2 <= 10); //true 

		System.out.println(10 >= 10); //true
		
		System.out.println(10 == 10); //true 

		System.out.println(10 == 20); //false
		
		System.out.println(10 != 10); //false 

		System.out.println(10 != 20); //true 


	}
}

Right Shift operators (>>)
---------------------------
10 >> 1 = 10/2 

10 >> 2 = 10/4

10 >> 3 = 10/8

10 >> 4 = 10/16

10 >> 5 = 10/32

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int i=20 >> 3;

		System.out.println(i); // 20 / 8 = 2
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10 >> 5;

		System.out.println(i); // 10 / 32 = 0
	}
}

Left Shift operators (<<)
---------------------------
10 << 1 = 10*2 

10 << 2 = 10*4

10 << 3 = 10*8

10 << 4 = 10*16

10 << 5 = 10*32

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int i=10 << 4;

		System.out.println(i); // 10 * 16 = 160
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=100 << 5;

		System.out.println(i); // 100 * 32 = 3200
	}
}

6)Arithmetic operators
=======================
% - modules 
/ - division 
* - multiplication 
+ - addition 
- - subtraction 

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int i=10+5%10+6/2+9*2+6-4;

		System.out.println(i);
	}
}
/*
	10  +  5%10  +  6/2  +  9*2  +  6-4

	10  +  5     +  3    +  18   +   2 

	38
 */

Increment/Decrement operators(++/--)
=====================================
We have two types of increment operators.

i)Pre-increment 
	ex:
		++i;

2)post-increment 
	ex:
		i++;

We have two types of decrement operators.

i)Pre-decrement
	ex:
		--i;

ii)Post-decrement 
	ex:
		i--;

Post increment/decrement 
-------------------------
Rule 1 :  First Take 
Rule 2 :  Then Change

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		i++;

		System.out.println(i);//11
	}
}
 
ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		System.out.println(i++);//10
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=i++;

		System.out.println(i+" "+j);//11   10
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=i++ + i--; //10 + 11

		System.out.println(i+" "+j);//10 21
	}
}

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=i-- + i--; // 10 + 9 

		System.out.println(i+" "+j);//8 19
	}
}

Pre increment/decrement 
-------------------------
Rule 1 :  First Change 
Rule 2 :  Then Take

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		++i;

		System.out.println(i);//11
	}
}
ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		
		System.out.println(++i);//11
	}
}

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=++i;
		
		System.out.println(i+" "+j);//11  11
	}
}

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=++i + --i; // 11 10
		
		System.out.println(i+" "+j);// 10  21
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=--i + --i + --i; // 9 + 8 + 7
		
		System.out.println(i+" "+j);//7 24
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;
		
		System.out.println(i++ + ++i);//10 + 12
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=100;

		100++;

		System.out.println(i);//C.T.E 
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		System.out.println(++(i++));//C.T.E 
	}
}


Control statements
====================
Control statement enables the programmer to control flow of our program.

Control statement allows us to make decisions, to jump from one section of code to another section and to execute the code repeatedly.

In java, we have four control statements.

1) Decision making statement 

2) Selection statement 

3) Iteration statement 

4) Jump statement 

1) Decision making statement 
--------------------------
It is used to create conditions in our programs.

Decision making statement is possible by using following ways.

i) if stmt 

ii) if else stmt 

iii) if else if ladder 

iv) nested if stmt 

i) if stmt 
-----------
It will execute the source code only if our condition is true.

syntax:
	if(condition)
	{
		-
		- //code to be execute 
		-
	}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		if(5>1)
		{
			System.out.println("stmt2");
		}
		System.out.println("stmt3");
	}
}
o/p:
	stmt1
	stmt2
	stmt3

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		if(10 == 20)
		{
			System.out.println("stmt2");
		}
		System.out.println("stmt3");
	}
}
o/p:
	stmt1
	stmt3

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		if((5>2) && (6<1))
			System.out.println("stmt1");
			System.out.println("stmt2");
			System.out.println("stmt3");
	}
}

Q)Write a java program to find out greatest of two numbers?

import java.util.Scanner;
class  Test
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the First number :");
		int a=sc.nextInt();
		
		System.out.println("Enter the Second number :");
		int b=sc.nextInt();

		if(a>b)
			System.out.println(a+" is greatest");

		if(b>a)
			System.out.println(b+" is greatest");

	}
}

Q)Write a java program to find out greatest of three numbers?

import java.util.Scanner;
class  Test
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the First number :");
		int a=sc.nextInt();
		
		System.out.println("Enter the Second number :");
		int b=sc.nextInt();

		System.out.println("Enter the Third number :");
		int c=sc.nextInt();

		if((a>b) && (a>c))
			System.out.println(a+" is greatest");

		if((b>a) && (b>c))
			System.out.println(b+" is greatest");

		if((c>a) && (c>b))
			System.out.println(c+" is greatest");

	}
}


ii) if else stmt
=================
It will execute the source code either our condition is true or false.

syntax:
	if(condition)
	{
		- //code to be execute if cond is true 
	}
	else
	{
		- //code to be execute if cond is false 
	}


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		if(2>1)
		{
			System.out.println("stmt2");
		}
		else
		{
			System.out.println("stmt3");
		}
		System.out.println("stmt4");
	}
}
o/p:
	stmt1
	stmt2
	stmt4

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		if(2>10)
		{
			System.out.println("stmt2");
		}
		else
		{
			System.out.println("stmt3");
		}
		System.out.println("stmt4");
	}
}
o/p:
	stmt1
	stmt3
	stmt4

Q)Write a java program to find out given age is eligible to vote or not?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the age :");
		int age=sc.nextInt();

		if(age>=18)
			System.out.println("U r eligible to vote");
		else
			System.out.println("U r not eligible to vote");
	}
}

Q)Write a java program to check given number is even or odd?


import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the number :");
		int n=sc.nextInt();

		if(n%2==0)
			System.out.println("It is even number");
		else
			System.out.println("It is odd number");
	}
}

Q)Write a java program to find out given number is odd or not?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the number :");
		int n=sc.nextInt();

		if(n%2!=0 || n%2==1)
			System.out.println("It is odd number");
		else
			System.out.println("It is not odd umber");
	}
}


Q)Write a java program to find out given number is positive or negative ?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the number :");
		int n=sc.nextInt();

		if(n==0)
		{
			System.out.println("It is not a +ve or -ve number");
			System.exit(0);
		}

		if(n>0)
			System.out.println("It is positive number");
		else
			System.out.println("It is negative number");
	}
}

Q)Write a java program to find out given year is a leap year or not?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the year :");
		int year=sc.nextInt();

		if(year%4==0)
			System.out.println("It is leap year");
		else
			System.out.println("It is not leap year");
	}
}

iii) if else if ladder
=======================
It will execute the source code based on multiple conditions.

syntax:
------
	if(cond1)
	{
		- //code to be execute cond1 is true 
	}
	else if(cond2)
	{
		- //code to be execute cond2 is true 
	}
	else if(cond3)
	{
		- //code to be execute cond3 is true 
	}
	else
	{
		- //code to be execute if all conditions are false
	}


ex:
----
import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the option :");
		int option=sc.nextInt(); 

		if(option==100)
		{
			System.out.println("It is police number");
		}
		else  if(option==103)
		{
			System.out.println("It is Enquiry number");
		}
		else  if(option==108)
		{
			System.out.println("It is emergency number");
		}
		else
		{
			System.out.println("Invalid option");
		}
		
	}
}

Q)Write a java program to find out given alphabet is a vowel or not?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the alphabet :");
		char ch=sc.next().charAt(0);

		if(ch=='a' || ch=='A')
			System.out.println("It is a vowel");
		else if(ch=='e' || ch=='E')
			System.out.println("It is a vowel");
		else if(ch=='i' || ch=='I')
			System.out.println("It is a vowel");
		else if(ch=='o' || ch=='O')
			System.out.println("It is a vowel");
		else if(ch=='u' || ch=='U')
			System.out.println("It is a vowel");
		else
			System.out.println("It is not a vowel");
		
	}
}

Q)Write a java program to check given alphabet is a upper case letter, lower case letter, digit or special symbol?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the alphabet :");
		char ch=sc.next().charAt(0);

		if(ch>='A' && ch<='Z')
			System.out.println("It is uppercase letter");
		else if(ch>='a' && ch<='z')
			System.out.println("It is lowercase letter");
		else if(ch>='0' && ch<='9')
			System.out.println("It is digit");
		else
			System.out.println("It is special symbol");
		
	}
}


iv) nested if stmt 
===================
If stmt contains another if stmt is called nested if stmt.

syntax:
	if(condition)
	{
		if(condition)
		{
			-
			- //code to be execute 
			-
		}
	}

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		if(true)
		{
			System.out.println("stmt2");
			if(!(5>20))
			{
				System.out.println("stmt3");
			}
			System.out.println("stmt4");
		}
		System.out.println("stmt5");
	}
}
o/p:

stmt1
stmt2
stmt3
stmt4
stmt5


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		if(false)
		{
			System.out.println("stmt2");
			if(!(5>20))
			{
				System.out.println("stmt3");
			}
			System.out.println("stmt4");
		}
		System.out.println("stmt5");
	}
}
o/p:
	stmt1
	stmt5

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		if(true)
		{
			System.out.println("stmt2");
			if(5>20)
			{
				System.out.println("stmt3");
			}
			System.out.println("stmt4");
		}
		System.out.println("stmt5");
	}
}
o/p:
	stmt1
	stmt2
	stmt4
	stmt5


Q)Write a java program to find out given number is +ve or -ve by using nested if stmt?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the number :");
		int n=sc.nextInt();

		if(n!=0)
		{
			if(n>0)
			{
				System.out.println("It is positive number");
				System.exit(0);
			}
			System.out.println("It is negative number");
		}
	}
}


2)Selection Statement
======================

switch case
-----------
It will execute the source code based on multiple conditions.

It is similar to if else if ladder.

syntax:
	switch(condition/expression)
	{
		case val1:  //code to be execute
			    break stmt;
		case val2:  //code to be execute
			    break stmt;
		-
		-
		default:  //code to be execute if all cases are false.
	}

Declaration of break statement is optional in switch case.If we won't define break statement then from where our condition is satisfied from there all 
cases will be executed , that state is called "fall through state of switch case".

ex:
----
import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the option :");
		int option=sc.nextInt();

		switch(option)
		{
			case 100: 
				System.out.println("It is police number");
						break;
			case 103: 
				System.out.println("It is enquiry number");
						break;
			case 108: 
				System.out.println("It is emergency number");
						break;
			default:
				System.out.println("Invalid option");
		}
	}
}

ex:
---
import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the option :");
		int option=sc.nextInt();

		switch(option)
		{
			case 100: 
				System.out.println("It is police number");
						
			case 103: 
				System.out.println("It is enquiry number");
						
			case 108: 
				System.out.println("It is emergency number");
						
			default:
				System.out.println("Invalid option");
		}
	}
}

Q)Write a java program to find out given alphabet is a vowel or consonent?


import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the alphabet :");
		char ch=sc.next().charAt(0);

		switch(ch)
		{
			case 'a': System.out.println("It is a vowel"); break;
			case 'e': System.out.println("It is a vowel"); break;			
			case 'i': System.out.println("It is a vowel"); break;
			case 'o': System.out.println("It is a vowel"); break;
			case 'u': System.out.println("It is a vowel"); break;		
			default : System.out.println("It is consonent");
		}
	}
}

ex:
---
import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the string :");
		String str=sc.next();

		switch(str)
		{
			case "one" : System.out.println("January"); break;
			case "two": System.out.println("February"); break;	
			case "three": System.out.println("March"); break;
			case "four": System.out.println("April"); break;
			case "five": System.out.println("May"); break;		
			default : System.out.println("coming soon...");
		}
	}
}

The allowed datatype for switch case are byte,short,int ,char and String.
If we take other datatype then we will get compile time error.
ex:

class Test  
{
	public static void main(String[] args) 
	{
		float f=10.3f;

		switch(f)
		{
			case 10.1 : System.out.println("January"); break;
			case 10.2: System.out.println("February"); break;			
			case 10.3: System.out.println("March"); break;
			case 10.4: System.out.println("April"); break;
			case 10.5 : System.out.println("May"); break;		
			default : System.out.println("coming soon...");
		}
	}
}








Assignment
============
Q)Write a java program to check given alphabet is vowel or consonent using 
if else stmt?


Q)Write a java program to find out greatest of two numbers?


Q) Write a java program to accept six marks of a student then find out total , average and grade?

i) If average greater then equals to 75 then A grade.

ii) If average greater then equals to 50 then B grade.

iii) If average greater then equals to 35 then C grade.

iv) If average is less then 35 then Failed.


3)Iteration statement
======================
Iteration statement is used to execute the code repeatedly.

Iteatation statement is possible by using LOOPS.

We have four types of loops.

i)do while loop

ii) while loop

iii) for loop

iv) for each loop

i)do while loop
-------------------
It will execute the source code untill our condition is true.

syntax:
	do
	{
		-
		- //code to be execute
		-
	}while(condition);

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=1;

		do
		{
			System.out.print(i+" "); // infinite 1 
		}
		while (i<=10);
	}
}

In do while loop , our code will execute atleast for one time either our 
condition is true or false.

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int i=11;
		do
		{
			System.out.print(i+" "); // 11  
		}
		while (i<=10);
	}
}

Q)Write a java program to display 10 natural numbers?

class Test  
{
	public static void main(String[] args) 
	{
		int i=1;
		do
		{
			System.out.print(i+" "); // 1 2 3 4 5 6 7 8 9 10
			i++;
		}
		while (i<=10);
	}
}

Q)Write a java program to display 10 natural numbers in descending order?


class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		do
		{
			System.out.print(i+" "); // 10 9 8 7 6 5 4 3 2 1 
			i--;
		}
		while (i>=1);
	}
}


Q)Write a java program to perform sum of 10 natural numbers?

	1+2+3+4+5+6+7+8+9+10 = 55 


class Test  
{
	public static void main(String[] args) 
	{
		int i=1,sum=0;
		do
		{
			sum=sum+i;
			i++;
		}
		while (i<=10);

		System.out.println(sum);
	}
}

Q)Write a java program to find out factorial of a given number?

input:
	5 

output:
	120 (5*4*3*2*1)

ex:

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the number :");
		int n=sc.nextInt();

		int i=n,fact=1;
		do
		{
			fact=fact*i;
			i--;
		}
		while (i>=1);

		System.out.println(fact);
	}
}

Q)Write a java program to find out multiplication table of a given number?


import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the number :");
		int n=sc.nextInt();//5

		int i=1;
		do
		{
			System.out.println(n+" * "+i+" = "+n*i);
			i++;
		}
		while (i<=10);
	}
}

ii)while loop
--------------
It will execute the source code untill our condition is true.

syntax:
	while(condition)
	{
		-
		- //code to be execute 
		-
	}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=1;

		while(i<=10)
		{
			System.out.print(i+" ");//infinite 1
		}
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=11;

		while(i<=10)
		{
			System.out.print(i+" ");// nothing 
		}
	}
}

Q) Write a java program to display 100 natural numbers?

class Test  
{
	public static void main(String[] args) 
	{
		int i=1;

		while(i<=100)
		{
			System.out.print(i+" ");// 1 2 3  ... 100

			i++;
		}
	}
}

Q)Write a java program to find out sum of 10 natural numbers?

class Test  
{
	public static void main(String[] args) 
	{
		int i=1,sum=0;

		while(i<=10)
		{
			sum=sum+i;
			i++;
		}
		System.out.println(sum);
	}
}


Q)Write a java program to find out factorial of a given number?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the number :");
		int n=sc.nextInt();

		int i=n,fact=1;

		while(i>=1)
		{
			fact=fact*i;
			i--;
		}

		System.out.println(fact);
	}
}

Q)Write a java program to find out multiplication table of a given number?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the number :");
		int n=sc.nextInt();

		int i=1;

		while(i<=10)
		{
			System.out.println(n+" * "+i+" = "+n*i);

			i++;
		}
	}
}

Q)Write a java program to find out sum of digits of a given number?

input:
	123

output:
	6

ex:
---

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the number :");
		int n=sc.nextInt();

		int rem,sum=0;

		while(n>0)
		{
			rem=n%10;
			sum=sum+rem;
			n=n/10;
		}
		System.out.println(sum);
	}
}

Q)Write a java program to find out given number is armstrong or not?

input:
	153 (1*1*1+5*5*5+3*3*3)(1+125+27)

output:
	It is a armstrong number

ex:

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the number :");
		int n=sc.nextInt();

		int temp=n;

		int rem,sum=0;

		while(n>0)
		{
			rem=n%10;
			sum=sum+rem*rem*rem;
			n=n/10;
		}
		if(temp==sum)
			System.out.println("It is armstrong number");
		else
			System.out.println("It is not armstrong number");
	}
}

Q)Write a java program to find out reverse of a given number?

inpupt:
	123

output:
	321

ex:


import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the number :");
		int n=sc.nextInt();

		int rem,rev=0;
		while(n>0)
		{
			rem=n%10;
			rev=rev*10+rem;
			n=n/10;
		}
		System.out.println(rev);	
	}
}

Q)Write a java program to check given number is palindrome or not?

input:
	121

output:
	It is palindrome number 

ex:

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the number :");
		int n=sc.nextInt();

		int temp=n;

		int rem,rev=0;
		while(n>0)
		{
			rem=n%10;
			rev=rev*10+rem;
			n=n/10;
		}
	
		if(temp==rev)
			System.out.println("It is palindrome number");
		else
			System.out.println("It is not palindrome number");
	}
}

iii)for loop
------------
It will execute the source code untill our condition is true.

syntax:
	for(initialization;condition;incrementation/decrementation)
	{
		-
		- //code to be execute 
		-	
	}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		for(int i=1;i<=10;i++)
		{
			System.out.print(i+" ");//1 2 3 4 5 6 7 8 9 10
		}
	}
}

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		for(int i=1;i<=10;i++)
		{
			System.out.print(i+" ");//infinite 1

			i--;
		}
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		for(;;)
		{
			System.out.print("Hello ");//infinite Hello 
		}
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		for(int i=1;i<=10;i++)
		{
			if(i%2==0)
			{
				System.out.print(i+" "); //2 4 6 8 10
			}
		}
	}
}

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int even=0,odd=0;
		for(int i=1;i<=10;i++)
		{
			if(i%2==0) 
			{
				even++;
			}
			else
			{
				odd++;
			}
		}
		System.out.println(even); //5 
		System.out.println(odd); // 5 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		for(int i=1;i<=20;i++)
		{
			if(i%2==0)
			{
				System.out.print(i+" "); //4 10 16
			}
			i=i+2;
		}
	}
}

ex:

class Test  
{
	public static void main(String[] args) 
	{
		for(int i=1;i<=20;i++)
		{
			if(i%2==0)
			{
				System.out.print(i+" ");//2 6 10 14 18
				i=i+2;
			}
		}
	}
}



Assignment
===========
Q)Write a java program to display reverse of a given number in words?

input:
	123

output:
	ThreeTwoOne

Q)Write a java program to find out fibonacci series of a given number?

fibonacci series : 0 1 1 2 3 5 8

ex:

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the number :");
		int n=sc.nextInt(); //5 

		int a=0,b=1,c;	

		System.out.print(a+" "+b+" ");

		for(int i=2;i<=n;i++)
		{
			c=a+b;
			System.out.print(c+" ");
			a=b;
			b=c;
		}


	}
}

Q)Write a java program to find out given number is perfect or not?

input:
	6

output:
	It is a perfect number 

ex:
---
import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the number :");
		int n=sc.nextInt(); //6 

		int sum=0;
		for(int i=1;i<n;i++)
		{
			if(n%i==0)
			{
				sum+=i;
			}
		}
		if(sum==n)
			System.out.println("It is a perfect number");
		else
			System.out.println("It is not a perfect number");
	}
}

Q)Write a java program to check given number is prime or not?

prime numbers : 
2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 
37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 
79, 83, 89, 97

ex:

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the number :");
		int n=sc.nextInt(); //5

		boolean flag=true;
		for(int i=2;i<=n/2;i++)
		{
			if(n%i==0)
			{
				flag=false;
				break;
			}
		}
		if(flag==true)
			System.out.println("It is prime number");
		else
			System.out.println("It is not prime number");
	}
}

Q)Write a java program to find out GCD(Greatest Common Divisor) of two numbers?

input:
	12	18

output:
	6

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=12,b=18,gcd=0;

		for(int i=1;i<=12 || i<=18;i++)
		{
			if((a%i==0) && (b%i==0))
			{
				gcd=i;
			}
		}
		System.out.println("GCD of two numbers is ="+gcd);
	}
}

Assignment
=========
Q)Write a java program to display list of prime numbers between two given numbers?

input:
	2       20

output:
	2 3 5 7 11 13 17 19



Various ways to declare the methods in java
===========================================
We can declare a method in java by using following ways.

1)No returntype With No argument method 

2)No returntype With argument method 

3)With returntype With No argument method 

4)With returntype With argument method 

1)No returntype With No argument method 
---------------------------------------
If we don't have any arguments then we need to ask our inputs inside callie method.

Q)Write a java program to perform sum of two numbers using no returntype with no argument method?


import java.util.Scanner;
class Test
{
	public static void main(String[] args)
	{
		//caller method
		sum();
	}

	//callie method
	public static void sum()
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the first number :");
		int a=sc.nextInt();
		System.out.println("Enter the second number :");
		int b=sc.nextInt();

		//logic
		int c=a+b;
		System.out.println("sum of two numbers is ="+c);
	}
}

Q)Write a java program to find out given number is even or odd by using no returntype with no argument method?

import java.util.Scanner;
class Test
{
	public static void main(String[] args)
	{
		//caller method
		find();
	}

	//callie method
	public static void find()
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the number :");
		int n=sc.nextInt();
		if(n%2==0)
			System.out.println("It is even number");
		else
			System.out.println("It is odd number");
	}
}

3)With returntype With No argument method 
--------------------------------------------
A returntype is completely depends upon datatype of output variable.

Q)Write a java program to perform sum of two numbers using with returntype with no argument method?

ex:
---
import java.util.Scanner;
class Test
{
	public static void main(String[] args)
	{
		//caller method
		int k=sum();
		System.out.println("sum of two numbers is ="+k);
	}

	//callie method
	public static int sum()
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a=sc.nextInt();
		System.out.println("Enter the Second number :");
		int b=sc.nextInt();

		int c=a+b;

		return c;
	}
}

Q)Write a java program to find out area of a circle by using with returntype with no argument method?

import java.util.Scanner;
class Test
{
	public static void main(String[] args)
	{
		//caller method
		float k=circle();
		System.out.println("area of a circle is ="+k);
	}

	//callie method
	public static float circle()
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the radius :");
		int r=sc.nextInt();

		float area=3.14f*r*r;

		return area;
	}

}

2)No returntype With argument method 
--------------------------------------
Number of arguments is depend upon number of inputs.

If we have arguments then we need to ask input values inside main method.

Q)Write a java program to perform sum of two numbers by using no returntype with argument method?

import java.util.Scanner;
class Test
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the First number :");
		int a=sc.nextInt();
		System.out.println("Enter the second number :");
		int b=sc.nextInt();

		//caller method
		sum(a,b);
	}

	//callie method
	public static void sum(int a,int b)
	{
		int c=a+b;
		System.out.println("sum of two numbers is ="+c);
	}

}

Q)Write a java program to find out given number is even or odd using no return type with argument method?


import java.util.Scanner;
class Test
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the number :");
		int n=sc.nextInt();
		
		//caller method
		find(n);
	}

	//callie method
	public static void find(int n)
	{
		if(n%2==0)
			System.out.println("It is even number");
		else
			System.out.println("It is odd number");
	}
}

4)With returntype With argument method 
---------------------------------------

Q)Write a java program to find out sum of two numbers by using with returntype with argument method?

import java.util.Scanner;
class Test
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the first number :");
		int a=sc.nextInt();
		System.out.println("Enter the second number :");
		int b=sc.nextInt();	
		//caller method
		System.out.println("sum of two numbers is ="+sum(a,b));
	}

	//callie method
	public static int sum(int a,int b)
	{
		int c=a+b;
		return c;
	}
}

Assignment
============
Q)Write a java program to find out cube of a given number?


Q)Write a java program to find out list of prime numbers from 1 to 100?

prime numbers : 

2, 3, 5, 7, 11, 13, 17, 19, 23, 
29, 31, 37, 41, 43, 47, 53, 59, 
61, 67, 71, 73, 79, 83, 89, 97.

ex:

class Test  
{
	public static void main(String[] args) 
	{
		for(int n=2;n<=100;n++)
		{
			boolean flag=true;

			for(int i=2;i<=n/2;i++)
			{
				if(n%i==0)
				{
					flag=false;
					break;
				}
			}
			if(flag==true)
				System.out.print(n+" ");
		}
	}
}

Java Recursion
===============
A method which call itself for many number of times is called recursion.

Recursion is similar to loopings.

Whenever we use recursion , we should not use loops.


Q)Write a java program to display 10 natural numbers without using loops?

class Test  
{
	public static void main(String[] args) 
	{
		//caller method
		display(1);
	}

	//callie method
	public static void display(int i)
	{
		if(i<=10)
		{
			System.out.print(i+" "); // 1 2 3 4 5 6 7 8 9 10

			display(i+1);
		}
	}
}

Q)Write a java program to find out factorial of a given number using recursion?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the number :");
		int n=sc.nextInt();//5

		//caller method
		System.out.println(factorial(n));
	}

	//callie method
	public static int factorial(int n)
	{
		if(n<0)
			return -1;

		if(n==0)
			return 1;

		return  n*factorial(n-1);
	}
}

Q)Write a java program to find out Nth-element of fibonacci series ?

fibonacci series : 0 1 1 2 3 5 8 

input:
	4

output:
	3

ex:

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the number :");
		int n=sc.nextInt(); //4

		//caller method
		System.out.println(fib(n));
	}

	//callie method
	public static int fib(int n)
	{
		if(n==1 || n==2)
			return 1;

		if(n==0)
			return 0;

		return fib(n-1)+fib(n-2);
	}
}

Q)Write a java program to perform sum of two numbers without using arithmetic operator?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the first number :");
		int a=sc.nextInt(); //5
		System.out.println("Enter the second number :");
		int b=sc.nextInt(); //10

		//caller method
		System.out.println(sum(a,b));

	}

	//callie method
	public static int sum(int a,int b)
	{
		if(a==0)
			return b;

		return sum(--a,++b);
	}
}

Q)Write a java program to find out given number is palindrome or not using recursion?

input:
	121

output:
	It is palidrome number

ex:

class Test  
{
	public static void main(String[] args) 
	{
		int num=121;
		int original=num;
		int reversed=0;

		//caller 
		if(isPalindrome(num,original,reversed))
			System.out.println("It is palindrome number");
		else
			System.out.println("It is not palindrome number");
	}

	//callie method
	public static boolean isPalindrome(int num,int original,int reversed)
	{
		if(num==0)
		{
			return original==reversed;
		}
		
		reversed= reversed*10+num%10;//

		return isPalindrome(num/10,original,reversed);

	}
}

LOOP Patterns
=============

1)
1 1 1 1 
2 2 2 2
3 3 3 3 
4 4 4 4 

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			//cols
			for(int j=1;j<=4;j++)
			{
				System.out.print(i+" ");
			}
			//new line
			System.out.println("");
		}
	}
}


2)
1 2 3 4
1 2 3 4
1 2 3 4
1 2 3 4


class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			//cols
			for(int j=1;j<=4;j++)
			{
				System.out.print(j+" ");
			}
			//new line
			System.out.println("");
		}
	}
}

3)
* * * * 
* * * *
* * * *
* * * * 


class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			//cols
			for(int j=1;j<=4;j++)
			{
				System.out.print("* ");
			}
			//new line
			System.out.println("");
		}
	}
}

4)
4 4 4 4 
3 3 3 3
2 2 2 2
1 1 1 1 



class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=4;i>=1;i--)
		{
			//cols
			for(int j=1;j<=4;j++)
			{
				System.out.print(i+" ");
			}
			//new line
			System.out.println("");
		}
	}
}

5)
A A A A 
B B B B
C C C C 
D D D D 

ex:


class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(char i='A';i<='D';i++)
		{
			//cols
			for(char j='A';j<='D';j++)
			{	
				System.out.print(i+" ");
			}
			//new line
			System.out.println("");
		}
	}
}

6)
D D D D 
C C C C 
B B B B
A A A A 

ex:


class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(char i='D';i>='A';i--)
		{
			//cols
			for(char j='A';j<='D';j++)
			{	
				System.out.print(i+" ");
			}
			//new line
			System.out.println("");
		}
	}
}


Assignment
==========
1)

1 1 1 
1 0 1 
1 1 1


ex:
----
* * * * 
*     *
*     *
* * * * 

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			//cols
			for(int j=1;j<=4;j++)
			{
				if(i==1||i==4 || j==1 || j==4)
					System.out.print("* ");
				else
					System.out.print("  ");
			}
			//new line
			System.out.println("");
		}
	}
}

ex:
----
* - - - 
- * - - 
- - * - 
- - - * 

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			//cols
			for(int j=1;j<=4;j++)
			{
				if(i==j)
					System.out.print("* ");
				else
					System.out.print("- ");
			}
			//new line
			System.out.println("");
		}
	}
}

ex:
-----
* - - - * 
- * - * -
- - * - -
- * - * - 
* - - - * 

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=5;i++)
		{
			//cols
			for(int j=1;j<=5;j++)
			{
				if(i==j || i+j==6)
					System.out.print("* ");
				else
					System.out.print("- ");
			}
			//new line
			System.out.println("");
		}
	}
}

Left Side LOOP patterns
=======================
1)
1
2 2 
3 3 3 
4 4 4 4 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			//cols
			for(int j=1;j<=i;j++)
			{
				System.out.print(i+" ");
			}
			//new line
			System.out.println("");
		}
	}
}


2)
1 
1 2 
1 2 3 
1 2 3 4

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			//cols
			for(int j=1;j<=i;j++)
			{
				System.out.print(j+" ");
			}
			//new line
			System.out.println("");
		}
	}
}

3)
4 4 4 4 
3 3 3 
2 2 
1 

ex:


class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=4;i>=1;i--)
		{
			//cols
			for(int j=1;j<=i;j++)
			{
				System.out.print(i+" ");
			}
			//new line
			System.out.println("");
		}
	}
}

4)

* 
* * 
* * * 
* * * *
* * * 
* * 
* 

ex
---
class Test  
{
	public static void main(String[] args) 
	{
		//ascending
		//rows
		for(int i=1;i<=4;i++)
		{
			//cols
			for(int j=1;j<=i;j++)
			{
				System.out.print("* ");
			}
			//new line
			System.out.println("");
		}
		//descending
		//rows
		for(int i=3;i>=1;i--)
		{
			//cols
			for(int j=1;j<=i;j++)
			{
				System.out.print("* ");
			}
			//new line
			System.out.println("");
		}
	}
}

5)
1
2 3 
4 5 6
7 8 9 0

ex:

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		int k=1;
		for(int i=1;i<=4;i++)
		{
			//cols
			for(int j=1;j<=i;j++)
			{
				if(k<=9)
					System.out.print(k+" ");
				else
					System.out.print("0");
				k++;
			}
			//new line
			System.out.println("");
		}

	}
}

6)
A 
B B 
C C C 
D D D D 

ex:

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(char i='A';i<='D';i++)
		{
			//cols
			for(char j='A';j<=i;j++)
			{
				System.out.print(i+" ");
			}
			//new line
			System.out.println("");
		}

	}
}



7)
1
2 1 
1 2 3
4 3 2 1 

ex:

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			//odd rows
			if(i%2!=0)
			{
				for(int j=1;j<=i;j++)
				{
					System.out.print(j+" ");
				}
			}
			else
			{
				for(int j=i;j>=1;j--)
				{
					System.out.print(j+" ");
				}
			}
			//new line
			System.out.println("");
		}
	}
}

8)
1
2#1
1#2#3
4#3#2#1

ex:

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			//odd rows
			if(i%2!=0)
			{
				for(int j=1;j<=i;j++)
				{
					if(j>1)
					System.out.print("#"+j);
					else
					System.out.print(j);

				}
			}
			else
			{
				for(int j=i;j>=1;j--)
				{
					if(j>1)
					System.out.print(j+"#");
					else
					System.out.print(j);
				}
			}
			//new line
			System.out.println("");
		}
	}
}





Assignment
----------
Q)Write a java program to display loop patter for prime numbers?

2
3  5
7  11 13
17 19 23 29


Right Side loop patterns
========================
1)
      1
    2 2 
  3 3 3 
4 4 4 4

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			//elements 
			for(int j=1;j<=i;j++)
			{
				System.out.print(i+" ");
			}
			//new line
			System.out.println("");
		}
	}
}

2)

4 4 4 4
  3 3 3 
    2 2 
      1

ex:
class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=4;i>=1;i--)
		{
			
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			//elements 
			for(int j=1;j<=i;j++)
			{
				System.out.print(i+" ");
			}
			//new line
			System.out.println("");
		}
	}
}

3)
      *
    * *
  * * *
* * * *
  * * *
    * * 
      * 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		//ascending 
		//rows
		for(int i=1;i<=4;i++)
		{
			
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			//elements 
			for(int j=1;j<=i;j++)
			{
				System.out.print("* ");
			}
			//new line
			System.out.println("");
		}
		//ascending 
		//rows
		for(int i=3;i>=1;i--)
		{
			
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			//elements 
			for(int j=1;j<=i;j++)
			{
				System.out.print("* ");
			}
			//new line
			System.out.println("");
		}
	}
}

Pyramid loop patterns
======================
1)
      1
    1 2 1 
  1 2 3 2 1 
1 2 3 4 3 2 1 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			//left side elements 
			for(int j=1;j<=i;j++)
			{
				System.out.print(j+" ");
			}
			//right side elements
			for(int j=i-1;j>=1;j--)
			{
				System.out.print(j+" ");
			}

			//new line
			System.out.println("");
		}
		
	}
}

2)
1 2 3 4 3 2 1 
  1 2 3 2 1 
    1 2 1 
      1

ex:

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=4;i>=1;i--)
		{
			
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			//left side elements 
			for(int j=1;j<=i;j++)
			{
				System.out.print(j+" ");
			}
			//right side elements
			for(int j=i-1;j>=1;j--)
			{
				System.out.print(j+" ");
			}

			//new line
			System.out.println("");
		}
		
	}
}

3)
      *
    * * * 
  * * * * *
* * * * * * * 
  * * * * *
    * * * 
      * 
ex:

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			//left side elements 
			for(int j=1;j<=i;j++)
			{
				System.out.print("* ");
			}
			//right side elements
			for(int j=i-1;j>=1;j--)
			{
				System.out.print("* ");
			}

			//new line
			System.out.println("");
		}

		//descending
		//rows
		for(int i=3;i>=1;i--)
		{
			
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			//left side elements 
			for(int j=1;j<=i;j++)
			{
				System.out.print("* ");
			}
			//right side elements
			for(int j=i-1;j>=1;j--)
			{
				System.out.print("* ");
			}

			//new line
			System.out.println("");
		}
		
	}
}

Note:
-----
If number of iterations are known by the user then we need to use for loop.

If number of iterations are not known by the user then we need to use while loop.

If number of iterations are not known by the user but code must execute atleast for one time then we need to use do while loop.


4)Jump statement
=================
Jump statement is used to jump from one section of code to another section.

We have two types of jump statements.

1) break statement 

2) continue statement 

1) break statement 
--------------------
It is used to break the execution of loops and switch case.

For conditional statement we can use if condition.

syntax:
------
	break; 

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		break;
		System.out.println("stmt2");
	}
}
o/p:
	C.T.E : break outside switch or loop

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		if(true)
		{
			break;
		}
		System.out.println("stmt2");
	}
}
o/p:
	C.T.E : break outside switch or loop


ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		for(int i=1;i<=10;i++)
		{
			if(i==5)
			{
				break;
			}
			System.out.print(i+" ");//1 2 3 4
		}
	}
}

2) continue statement 
---------------------
A continue stmt is used to continue the execution of loop.

For conditional statement we can use if condition.

syntax:
	continue;


ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		continue;
		System.out.println("stmt2");
	}
}
o/p:
	C.T.E  continue outside of loop

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		if(true)
		{
			continue;
		}
		System.out.println("stmt2");
	}
}
o/p:
	C.T.E  continue outside of loop


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		for(int i=1;i<=10;i++)
		{
			if(i==5)
			{
				continue;
			}
			System.out.print(i+" ");// 1 2 3 4 6 7 8 9 10
		}
	}
}

Arrays
========
In a normal variable we can store only one value at time.

To store more then one value in a single variable then we need to use Arrays.

Array is a collection of homogeneous data elements.

The main advantages of arrays are 

1) We can represent multiple elements by using single variable name.
   ex:
	int[] arr={10,20,30};

2)Performance point of view arrays are recommanded to use.

The main disadvantages of arrays are

1) Arrays are fixed in size, once if we create an array there is no chance 
   of increasing or decreasing the size of an array.

2) To use array concept in advanced we should know what is the size of an
   array which is also not possible.

In java, arrays are classified into three types.

1)Single Dimensional Array 

2)Double Dimensional Array / Two Dimensional Array 

3)Multi Dimensional Array / Three Dimensional Array


Array Declaration
-----------------
At the time of array declaration we should not specify array size.

				     Arrays
       |-------------------------------|-----------------------|
Single Dimensional Array   Double Dimensional Array   Multi Dimensional Array

int[] arr;			int[][] arr;		int[][][] arr;
int  []arr;			int [][]arr;		int  [][][]arr;
int  arr[];			int  arr[][];		int arr[][][];
				int[]  []arr;		int[][] []arr;
				int[]  arr[];		int[][] arr[];
				int  []arr[];		int[]  [][]arr;
							int[]  arr[][];
							int[]  []arr[];
							int  [][]arr[];
							int  []arr[][];


Array Creation
================
In java, every array consider as an object.Hence we will use new operator to create an array.

Diagram: java18.1

Rules to constructor an array
------------------------------
Rule1:
-----
At the time of array creation compulsary we need to specify array size.
ex:
	int[] arr=new int[3];  //valid 
	int[] arr=new int[]; //C.T.E array dimension missing 

Rule2:
------
It is legal to have an array size with zero.
ex:
	int[] arr=new int[0];
	System.out.println(arr.length);//0

Rule3:
------
We can't give negative number as an array size otherwise we will get 
one exception called NegativeArraySizeException.
ex:
	int[] arr=new int[-3];
	System.out.println(arr.length); // R.E NegativeArraySizeException 

Rule4:
-------
The allowed datatype for an array size is byte,short,int and char.If we take other datatypes then we will get compile time error.

ex:
	byte b=10;
	int[] arr=new int[b];	

	int[] arr=new int['a'];

	int[] arr=new int[10.5d];// C.T.E 

Rule5:
-----
The maximum length we can take for an array size is maximum length of int .
ex:
	int[] arr=new int[2147483647];

Array Initialization
-------------------
At the time of array creation ,every array elements will be initialized with default values.

If we are not satisfied with default values then we can change with customized values.
	

Diagram: java18.2


Array Declaration, creation and Intialization using single line
---------------------------------------------------------------

int[] arr;
arr=new int[3];
arr[0]=10;
arr[1]=20;
arr[2]=30;        ===>  int[] arr={10,20,30};

		  ===>  char[] carr={'a','b','c'};

		  ===>  String[] sarr={"hi","hello","bye"};


Q)What is the difference between length and length() method?

length
------
It is a final variable which is applicable for arrays.

It will return size of an array.

ex:

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr=new int[6];

		System.out.println(arr.length);//6
	}
}

length()
---------
It is a predefined method which is applicable for String object.

It will return number of characters present in String.

ex:

class Test  
{
	public static void main(String[] args) 
	{
		String str="bhaskar";

		System.out.println(str.length());//7
	}
}

Single Dimensional Array
-------------------------
Array which contains only one dimension is called single dimensional array.

syntax:					optional 
					|
	datatype[] variable_name=initialization;

ex:
	int[] arr;


Q)Write a java program to accept array elements and display them?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the array size :");
		int size=sc.nextInt();//5

		int[] arr=new int[size];

		//inserting elements
		for(int i=0;i<arr.length;i++)
		{
			System.out.println("Enter the element :");
			arr[i]=sc.nextInt();
		}
		
		//display elements
		for(int i=0;i<arr.length;i++)
		{
			System.out.print(arr[i]+" ");
		}
	}
}

approach2
---------
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={10,20,30,40};


		//display elements
		for(int i=0;i<arr.length;i++)
		{
			System.out.print(arr[i]+" ");
		}
	}
}

Approach3
----------
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={10,20,30,40};

		//for each loop
		for(int i:arr)
		{
			System.out.print(i+" ");
		}
	}
}

Q)Write a java program to display sum of array elements?

input:
	4 7 1 3 9 2 

output:
	26

ex:
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={4,7,1,3,9,2};

		int sum=0;
		for(int ele:arr)
		{
			sum+=ele;
		}
		System.out.println(sum);
	}
}

Q)Write a java program to display array elements in reverse order?

input:
	4 7 1 3 9 2 

output:
	2 9 3 1 7 4 
	
ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={4,7,1,3,9,2};


		for(int i=arr.length-1;i>=0;i--)
		{
			System.out.print(arr[i]+" ");
		}
		
	}
}



Q)Write a java program to display array elements in soring order?

input:
	5 9 1 3 7 6

output:
	1 3 5 6 7 9 

approach1
----------
import java.util.Arrays;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,9,1,3,7,6};

		Arrays.sort(arr); // 1 3 5 6 7 9 

		//for each loop
		for(int ele:arr)
		{
			System.out.print(ele+" ");
		}
	}
}

approach2
--------

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,9,1,3,7,6};

		
		//ascending logic
		for(int i=0;i<arr.length;i++)
		{	
			for(int j=0;j<arr.length;j++)
			{
				if(arr[i]<arr[j])
				{
					int temp=arr[i];
					arr[i]=arr[j];
					arr[j]=temp;
				}
			}
		}

		//for each loop
		for(int ele:arr)
		{
			System.out.print(ele+" ");
		}
	}
}

Q)Write a java program to display array elements in descending order?

input:
	5 9 1 3 7 6

output:
	9 7 6 5 3 1 

approach1
---------
import java.util.Arrays;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,9,1,3,7,6};

		Arrays.sort(arr);//1 3 5 6 7 9

		//reading reverse
		for(int i=arr.length-1;i>=0;i--)
		{
			System.out.print(arr[i]+" ");
		}
	}
}


apporach2
---------

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,9,1,3,7,6};

		
		//descending logic
		for(int i=0;i<arr.length;i++)
		{	
			for(int j=0;j<arr.length;j++)
			{
				if(arr[i]>arr[j])
				{
					int temp=arr[i];
					arr[i]=arr[j];
					arr[j]=temp;
				}
			}
		}

		//for each loop
		for(int ele:arr)
		{
			System.out.print(ele+" ");
		}
	}
}


Q)Write a java program to find out least element from given array?

input:
	5 9 1 3 7 6

output:
	1

approach1
----------
import java.util.Arrays;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,9,1,3,7,6};

		Arrays.sort(arr);//1 3 5 6 7 9

		System.out.println(arr[0]);//1
	}
}


approach2
---------
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,9,1,3,7,6};

		int small=arr[0];	
		
		//for each loop
		for(int ele:arr)
		{
			if(ele<small)
			{
				small=ele;
			}
		}
		System.out.println(small);
	}
}

Q)Write a java program to find out highest element from given array?

input:
	5 9 1 3 7 6

output:
	9

approach1
---------
import java.util.Arrays;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,9,1,3,7,6};

		Arrays.sort(arr);//1 3 5 6 7 9 

		System.out.println(arr[arr.length-1]);//9
	}
}



approach2
--------
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,9,1,3,7,6};

		int big=arr[0];	
		
		//for each loop
		for(int ele:arr)
		{
			if(ele>big)
			{
				big=ele;
			}
		}
		System.out.println(big);
	}
}

Q)Write a java program to display duplicate elements from given array?

input:
	4 6 2 3 1 1 6 9 7 2 

output:
	6 2 1

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={4,6,2,3,1,1,6,9,7,2};

		//duplicate elements
		for(int i=0;i<arr.length;i++)
		{
			for(int j=i+1;j<arr.length;j++)
			{
				if(arr[i]==arr[j])
				{
					System.out.print(arr[i]+" ");
				}
			}
		}
	}
}





Q)Write a java program to display unique elements from given array?

input:
	4 6 2 3 1 1 6 9 7 2 

output:
	4 3 9 7 

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={4,6,2,3,1,1,6,9,7,2};

		//unique elements
		for(int i=0;i<arr.length;i++)
		{
			int cnt=0;
			for(int j=0;j<arr.length;j++)
			{
				if(arr[i]==arr[j])
				{
					cnt++;
				}
			}
			if(cnt==1)
				System.out.print(arr[i]+" ");
		}
	}
}

Q)Write a java program to find out most repeating element from given array?

input:
	3 5 6 1 2 1 9 3 3 5 2 3 7 1

output:
	3 is repeating for 4 times 

ex:


class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={3,5,6,1,2,1,9,3,3,5,2,3,7,1};

		int maxCount=0;
		int element=0;

		//unique elements
		for(int i=0;i<arr.length;i++)
		{
			int cnt=0;
			for(int j=0;j<arr.length;j++)
			{
				if(arr[i]==arr[j])
				{
					cnt++;
				}
			}
			if(maxCount<cnt)
			{
				maxCount=cnt;
				element=arr[i];
			}
		}
		System.out.println(element+" is repeating for "+maxCount+" times");
	}
}

Q)Write a java program to display prime elements from given array?

input:
	2 4 9 5 13 17 6 29 

output:
	2 5 13 17 29 

ex:


class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={2,4,9,5,13,17,6,29};

		for(int n:arr)
		{
			boolean flag=true;

			//prime logic
			for(int i=2;i<=n/2;i++)
			{
				if(n%i==0)
				{
					flag=false;
					break;
				}
			}
			if(flag==true)
				System.out.print(n+" ");
		}
	}
}

Q)Write a java program to find out leader elements from given array?

input:
	4 8 32 16 9 12 5

output:
	 5 12 16 32

ex:


class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={4,8,32,16,9,12,5};

		int max=arr[arr.length-1];
		
		System.out.print(max+" ");

		for(int i=arr.length-2;i>=0;i--)
		{
			if(arr[i]>max)
			{
				max=arr[i];
				System.out.print(max+" ");
			}
		}
		
	}
}

Q)Write a java program to find out missing element from given array?

input:
	5 7 1 2 3 6

output:
	4

ex:


class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,7,1,2,3,6};

		int sum_arr_ele=arr.length+1;


		int sum=(sum_arr_ele*(sum_arr_ele+1))/2;


		for(int ele:arr)
		{
			sum=sum-ele;
		}

		System.out.println("Missing element is ="+sum);
	}
}

Assignment
============
Q) Write a java program to perform sum of two array elements?

input:

	arr1 :  2 4 6 8 10 

	arr2 :  1 3 5 7 9

output:
	3 7 11 15 19

==========================================================================================================


Q)Write a java program to seggreate array elements?

input:
	0 1 1 0 0 1 0 1 1 0 

output:
	0 0 0 0 0 1 1 1 1 1 

approach1
-----------
import java.util.Arrays;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={0,1,1,0,0,1,0,1,1,0};

		Arrays.sort(arr);//0 0 0 0 0 1 1 1 1 1 

		for(int ele:arr)
		{
			System.out.print(ele+" ");
		}
	}
}

approach2
--------
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={0,1,1,0,0,1,0,1,1,0};

		int[] resArr=new int[arr.length];

		//inserting '0' 
		//for each loop
		int j=0;
		for(int ele:arr)
		{
			if(ele==0)
			{
				resArr[j++]=ele;
			}
		}

		//inserting '1'
		while(j<arr.length)  
		{
			resArr[j++]=1;
		}

		//display the elements
		for(int ele:resArr)
		{
			System.out.print(ele+" ");
		}
	}
}

Q)Write a java program to concatinate two arrays and display them in sorting order?

input:
	arr1 = 5 4 1 3 2 

	arr2 = 9 6 7 8 10

output:
	1 2 3 4 5 6 7 8 9 10

ex:

import java.util.Arrays;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr1 ={5,4,1,3,2}; 

		int[] arr2 ={9,6,7,8,10};

		int size1=arr1.length;
		int size2=arr2.length;

		arr1=Arrays.copyOf(arr1,size1+size2);

		int j=0;
		for(int i=size1;i<arr1.length;i++)
		{
			arr1[i]=arr2[j++];
		}

		//sorting
		Arrays.sort(arr1);

		//for each loop
		for(int ele:arr1)
		{
			System.out.print(ele+" ");
		}
	}
}

Q)Write a java program to delete first occurance from given array?

input:
	arr = 4 3 9 6 3 7 3 1 2

	ele = 3

output:
	4 9 6 3 7 3 1 2 

ex:
	

import java.util.Arrays;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr ={4,3,9,6,3,7,3,1,2};

		int[] resArr=new int[arr.length-1];

		int ele=3;

		int cnt=0,j=0;
		for(int i=0;i<arr.length;i++)
		{
			if(arr[i]==ele && cnt==0)
			{
				cnt++;
				continue;
			}
			resArr[j++]=arr[i];
		}

		//display
		for(int element:resArr)
		{
			System.out.print(element+" ");
		}

	}
}

Q)Write a java program to insert given element on given position?

input:
	arr = 4  7  9  1  2  6  

	ele = 5

	position = 3

output:
	4 7 9 5 1 2 6 

ex:
---
import java.util.Arrays;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={4,7,9,1,2,6}; 
		int ele = 5;
		int position = 3;

		arr=Arrays.copyOf(arr,arr.length+1);

		for(int i=arr.length-1;i>=position;i--)
		{
			arr[i]=arr[i-1];
		}
		arr[position]=ele;
	
		//display
		for(int element:arr)
		{
			System.out.print(element+" ");
		}
	}
}


Two Dimensional Array
======================
Two dimensional array is a combination of rows and columns.

Two dimensional array is implemented based on array of arrays approach but not in matrix form.

The main objective of two dimensional array is memory utilization.

Two dimensional array is used to develop matrix type of applications, business oriented applications ,gaming applications and etc.

We can declare two dimensional array as follow.

syntax:

	datatype[][] variable_name=new datatype[rows][cols];

ex:
	int[][] arr=new int[3][3];

	Here we can store 9 elements.


Q)Write a java program to display array elements in matrix form?

ex:
---

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the rows :");
		int rows=sc.nextInt();//3

		System.out.println("Enter the columns :");
		int cols=sc.nextInt();//3

		int[][] arr=new int[rows][cols];

		//inserting the elements
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				System.out.println("Enter the element :");
				arr[i][j]=sc.nextInt();
			}
		}

		//display the elements
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				System.out.print(arr[i][j]+" ");
			}
			//new line
			System.out.println("");
		}

	}
}









Q)Write a java program to display square of a matrix ?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the rows :");
		int rows=sc.nextInt();//3

		System.out.println("Enter the columns :");
		int cols=sc.nextInt();//3

		int[][] arr=new int[rows][cols];

		//inserting the elements
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				System.out.println("Enter the element :");
				arr[i][j]=sc.nextInt();
			}
		}

		//display the elements
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				System.out.print(arr[i][j] * arr[i][j] +" ");
			}
			//new line
			System.out.println("");
		}

	}
}


Q)Write a java program to find out sum of diagonal elements?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the rows :");
		int rows=sc.nextInt();//3

		System.out.println("Enter the columns :");
		int cols=sc.nextInt();//3

		int[][] arr=new int[rows][cols];

		//inserting the elements
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				System.out.println("Enter the element :");
				arr[i][j]=sc.nextInt();
			}
		}

		//display the elements
		int sum=0;
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				if(i==j)
				{
					sum+=arr[i][j];
				}
			}	
		}
		System.out.println("sum of diagonal elements is ="+sum);
	}
}

Q)Write a java program to find out sum of upper triangle elements?

ex:


import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the rows :");
		int rows=sc.nextInt();//3

		System.out.println("Enter the columns :");
		int cols=sc.nextInt();//3

		int[][] arr=new int[rows][cols];

		//inserting the elements
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				System.out.println("Enter the element :");
				arr[i][j]=sc.nextInt();
			}
		}

		//display the elements
		int sum=0;
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				if(i<j)
				{
					sum+=arr[i][j];
				}
			}	
		}
		System.out.println("sum of upper triangle elements is ="+sum);
	}
}


Q)Write a java program to find out sum of lower triangle elements?

ex:


import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the rows :");
		int rows=sc.nextInt();//3

		System.out.println("Enter the columns :");
		int cols=sc.nextInt();//3

		int[][] arr=new int[rows][cols];

		//inserting the elements
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				System.out.println("Enter the element :");
				arr[i][j]=sc.nextInt();
			}
		}

		//display the elements
		int sum=0;
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				if(i>j)
				{
					sum+=arr[i][j];
				}
			}	
		}
		System.out.println("sum of lower triangle elements is ="+sum);
	}
}

Assignment
==========
Q)Write a java program to display array elements in spiral form?

input:
	1 2 3 
        4 5 6
        7 8 9

output:
	1 2 3 6 9 8 7 4 5


===================================================================================================================================================================================================================

Q)Write a java program to display array elements in spiral form?

input:
	1 2 3 
        4 5 6
        7 8 9

output:
	1 2 3 6 9 8 7 4 5

ex:
----
public class Test 
{
    public static void main(String[] args) 
    {
        int[][] matrix = {
            			{1, 2, 3},
            			{4, 5, 6},
            			{7, 8, 9}
        		};

        int rows = matrix.length;
        int cols = matrix[0].length;

        int top = 0;
        int bottom = rows - 1;
        int left = 0;
        int right = cols - 1;

    while (true) 
	{
            if (left > right) 
	        {
                break;
            }

            // Print top row
            for (int i = left; i <= right; i++) {
                System.out.print(matrix[top][i] + " ");
            }
            top++;

            if (top > bottom) {
                break;
            }

            // Print right column
            for (int i = top; i <= bottom; i++) {
                System.out.print(matrix[i][right] + " ");
            }
            right--;

            if (left > right) {
                break;
            }

            // Print bottom row
            for (int i = right; i >= left; i--) 
	        {
                System.out.print(matrix[bottom][i] + " ");
            }
            bottom--;
    
            if (top > bottom) {
                break;
            }

            // Print left column
            for (int i = bottom; i >= top; i--) 
	        {
                System.out.print(matrix[i][left] + " ");
            }
            left++; 
	}//while loop  
    }
}

Anonymous array
================
Sometimes we will declare an array without name such type of nameless array is called anonymous array.

The main objective of anonymous array is just for instance use.

We can declare anonymous array as follow.

syntax:
	new int[]{10,20,30};
	new int[][]{{10,20,30},{40,50,60}};

ex:
----
public class Test 
{
    public static void main(String[] args) 
    {
		//caller method
		sum(new int[]{10,20,30});

	}
	//callie method 
	public static void sum(int[] arr)
	{
		int sum=0;
		for(int i:arr)
		{
			sum+=i;
		}
		System.out.println(sum);
	}
}

ex:
----
public class Test 
{
    public static void main(String[] args) 
    {
		//caller method
		System.out.println(sum(new int[]{10,20,30}));

	}
	//callie method 
	public static int sum(int[] arr)
	{
		int sum=0;
		for(int i:arr)
		{
			sum+=i;
		}
		return sum;
	}
}

OOPS
=====
OOPS stands for Object Oriented Programming System/Structure.

Object oriented technology
--------------------------
A technology which provides very good environment to represent our data in the form objects is called object oriented technology.

A technology said to be object oriented if it supports following features.

ex:
	class
	object 
	abstraction
	encapsulation
	inheritance &
	polymorphism


class
=======
A class is a collection of data members and behaviours.

Here data members means variables or fields or properties.

Here bahaviour means methods or actions or characteristics.

In general, a class is a collection of variables and methods.

It is a blue print of an object.

We can declare a class as follow.

syntax:
	optional 
	|
	modifier class class_name <extends> parent_classname 
		                  <implements> interface_name
	{
		-
		- // variables and methods 
		-
	}

A class will accept following modifiers.
ex:
	default 
	public
	final
	abstract 

Q)What is the difference between default class and public class?

default class
------------
If we declare any class as default then we can access that class within the package.
ex:
	class A 
	{
		-
		- //logic 
		-
	}

public class
-------------
If we declare any class as public then we can access that class within the package and outside the package.
ex:
	public class A 
	{
		-
		- //logic 
		-
	}

Q)What is final class?

If we declare any class as final then creating child class is not possible.
ex:
	final class A 
	{
	}
	class B extends A  --> invalid 
	{	
	}


Q)What is abstract class?

If we declare any class as abstract then creating object for that class is not possible.
ex:
	abstract class A 
	{
		-	
	}
	A a=new A(); --> invalid 	



object 
=========
It is a instance of a class.

Here instance means allocating memory for our data members.

It is a outcome of a blue print.

We can create object as follow.

syntax:
------
	Class_Name  reference_variable=new  Constructor();

ex:
	Test t=new Test();

It is possible to create more then one object in a single class.

Memory space will be created when create an object.

ex:

public class Test 
{
    public static void main(String[] args) 
    {
		Test t1=new Test();
		Test t2=new Test();
		Test t3=new Test();

		System.out.println(t1.hashCode());
		System.out.println(t2.hashCode());
		System.out.println(t3.hashCode());

		System.out.println(t1); //Test@Hexadecimal
		System.out.println(t2); //Test@Hexadecimal
		System.out.println(t3); //Test@Hexadecimal

	}
}

hashCode()
============
It is a method present in Object class.

For every object JVM will create a unique identification number i.e hash code.

In order to read hash code of an object we need to use hashCode() method.

Diagram: java21.1

toString()
===========
It is a method present in Object class.

Whenever we are trying to display any object reference directly or indirectly toString() method will be executed.


Q)What is Object class?

It is a parent class for every java class.

It is present in java.lang package.

Object class contains following methods.

ex:
	cmd> javap   java.lang.Object 

	getClass()
	wait()
	notify()
	notifyAll()
	clone()
	hashCode()
	toString()
	and etc.

ex:
---
public class Test 
{
    public static void main(String[] args) 
    {
		Test t=new Test();
		System.out.println(t.getClass()); //class Test
	}
}

Data Hiding
===========
Our internal data should not go out directly.

It means outside perform must not access our data directly.

Using private modifier we can implements data hiding.

The main objective of data hiding is to provide security.

ex:
	class  Account
	{
		private double balance;	
		-
		-
	}



Abstraction
=============
Hiding internal implementation and highlighting the set of services is called abstraction.

Using interfaces and abstract classes we can implements abstraction.

The best of abstraction is GUI(Graphical User Interface) ATM machine.Where bank people will hide internal implementation and high lights the set of services like banking , withdrawl, mini statement and etc.

The main advantages of abstraction are.

1) It gives security because it wil hide internal implementation from the    outsider.

2) Enhancement becomes more easy because without effecting enduser they can
  perform any changes in our internal system.

3) It provides flexibility to the enduser to use the system.

4) IT improves maintainability of an application.